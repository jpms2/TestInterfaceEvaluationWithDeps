Given /^I have a (?:deferred )todo "([^"]*)" in the context "([^"]*)" deferred by (\d+) day(?:s)?$/ do |description, context_name, deferred_by_days|
  context = @current_user.contexts.where(:name => context_name).first_or_create
  todo = @current_user.todos.create!(:context_id => context.id, :description => description)
  todo.show_from = UserTime.new(@current_user).time + deferred_by_days.to_i.day
  todo.save!
end
When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end
Then /^(?:|I )should see "([^"]*)" before "([^"]*)"$/ do |earlier_content, later_content|
  expect(page).to have_content(earlier_content)
  expect(page).to have_content(later_content)
  page.body.index(earlier_content).should < page.body.index(later_content)
end
  def path_to(page_name)
    options = {}
    options[:format] = :m if @mobile_interface 
    options[:locale] = @locale if @locale
    options[:_group_view_by] = @group_view_by if @group_view_by
    @source_view = nil
    
    case page_name

    when /the home\s?page/
      @source_view = "todos"
      root_path(options)

    when /the done page/
      @source_view = "done"
      done_overview_path(options)
    when /the done actions page for context "([^"]*)"/i
      @source_view = "done"
      context = @current_user.contexts.where(:name => $1).first
      done_todos_context_path(context, options)
    when /the done actions page for project "([^"]*)"/i
      @source_view = "done"
      project = @current_user.projects.where(:name => $1).first
      done_todos_project_path(project, options)
    when /the done actions page for tag "([^"]*)"/i
      @source_view = "done"
      done_tag_path($1, options)
    when /the done actions page/
      @source_view = "done"
      done_todos_path(options)
    when /the all done actions page for context "([^"]*)"/i
      @source_view = "done"
      context = @current_user.contexts.where(:name => $1).first
      all_done_todos_context_path(context, options)
    when /the all done actions page for project "([^"]*)"/i
      @source_view = "done"
      project = @current_user.projects.where(:name => $1).first
      all_done_todos_project_path(project, options)
    when /the all done actions page for tag "([^"]*)"/i
      @source_view = "done"
      all_done_tag_path($1, options)
    when /the all done actions page/
      @source_view = "done"
      all_done_todos_path(options)

    when /the statistics page/
      @source_view = "stats"
      stats_path(options)
    when /the signup page/
      signup_path(options)
    when /the login page/
      login_path(options)
    when /the logout page/
      logout_path(options)
    when /the notes page/
      notes_path(options)
    when /the calendar page/
      calendar_path(options)
    when /the review page/
      @source_view = "review"
      review_path(options)
    when /the contexts page/
      @source_view = "context"
      contexts_path(options)
    when /the projects page/
      @source_view = "project"
      projects_path(options)
    when /the manage users page/
      users_path(options)
    when /the recurring todos page/
      recurring_todos_path(options)
    when /the integrations page/
      integrations_path(options)
    when /the tickler page/
      @source_view = "deferred"
      tickler_path(options)
    when /the export page/
      data_path(options)
    when /the preference page/
      preferences_path(options)
    when /the rest api docs page/
      rest_api_docs_path(options)
    when /the search page/
      search_path(options)
    when /the starred page/
      tag_path("starred", options)
    when /the feeds page/
      feeds_path(options)
    when /the context page for "([^\"]*)" for user "([^\"]*)"/i
      @source_view = "context"
      @context = User.where(:login => $2).first.contexts.where(:name => $1).first
      context_path(@context, options)
    when /the context page for "([^\"]*)"/i
      @source_view = "context"
      @context = @current_user.contexts.where(:name => $1).first
      context_path(@context, options)
    when /the "([^\"]*)" context/i
      @source_view = "context"
      @context = @current_user.contexts.where(:name => $1).first
      context_path(@context, options)
    when /the "([^\"]*)" project for user "([^\"]*)"/i
      @source_view = "project"
      @project = User.where(:login => $2).first.projects.where(:name => $1).first
      project_path(@project, options)
    when /the "([^\"]*)" project/i
      @source_view = "project"
      @project = @current_user.projects.where(:name => $1).first
      project_path(@project, options)
    when /the tag page for "([^"]*)"/i
      @source_view = "tag"
      tag_path($1, options)
    when /the change password page/
      change_password_user_path @current_user
      
    # Add more mappings here.
    # Here is an example that pulls values out of the Regexp:
    #
    #   when /^(.*)'s profile page$/i
    #     user_profile_path(User.where(:login => $1))first.

    else
      begin
        page_name =~ /the (.*) page/
        path_components = $1.split(/\s+/)
        self.send(path_components.push('path').join('_').to_sym)
      rescue Object => e
        raise "Can't find mapping from \"#{page_name}\" to a path.\n" +
          "Now, go and add a mapping in #{__FILE__}"
      end
    end
  end
Given /^the following user records?$/ do |table|
  User.delete_all
  table.hashes.each do |hash|
    user = FactoryGirl.create(:user, hash)
    user.create_preference({:locale => 'en'})
  end
end
Given /^there exists a project (?:|called )"([^"]*)" for user "([^"]*)"$/ do |project_name, user_name|
  user = User.where(:login => user_name).first
  expect(user).to_not be_nil
  @project = user.projects.create!(:name => project_name)
  # acts_as_list adds at top by default, but that is counter-intuitive when reading scenario's, so reverse this
  @project.move_to_bottom
end
Given /^I have logged in as "(.*)" with password "(.*)"$/ do |username, password|
  user = User.where(:login => username).first
  request_signin_as(user)
  @current_user = user
end
  def request_signin_as(user)
    visit "/test_login_backdoor?user_id=#{user.id}"
  end
