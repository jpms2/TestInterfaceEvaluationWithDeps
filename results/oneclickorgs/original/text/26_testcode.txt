When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { step step }
end
Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end
When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end
When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end
When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end
When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end
When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end
Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end
Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end
Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
  def path_to(page_name)
    case page_name

    when /^the home\s?page$/
      '/'
    when /^the setup page$/
      '/setup'
    when /^the new association page$/
      '/associations/new'
    when /^the welcome page$/
      '/welcome'
    when /^the voting and proposals page$/
      '/'
    when /^my member page$/
      member_path(@user)
    when /^my account page$/
      edit_member_path(@user)
    when /^the proposal page$/
      @proposal ||= Proposal.last
      proposal_path(@proposal)
    when /^the member page for "(.*)"$/
      @member = @organisation.members.find_by_email($1)
      member_path(@member)
    when /^a member's page$/
      @member = @organisation.members.active.last
      member_path(@member)
    when /^the amendments page$/
      edit_constitution_path
    when /^the members page$/
      members_path
    when /^the new company page$/
      new_company_path
    when /^the Votes & Minutes page$/
      '/'
    when /^the page for the minutes$/
      @meeting ||= @organisation.meeting.last
      meeting_path(@meeting)
    when /^the Directors page$/
      members_path
    when /^the dashboard$/
      '/'
    
    # Add more mappings here.
    # Here is an example that pulls values out of the Regexp:
    #
    #   when /^(.*)'s profile page$/i
    #     user_profile_path(User.find_by_login($1))

    else
      begin
        page_name =~ /^the (.*) page$/
        path_components = $1.split(/\s+/)
        self.send(path_components.push('path').join('_').to_sym)
      rescue NoMethodError, ArgumentError
        raise "Can't find mapping from \"#{page_name}\" to a path.\n" +
          "Now, go and add a mapping in #{__FILE__}"
      end
    end
  end
  def selector_for(locator)
    case locator

    when "the page"
      "html > body"

    # Add more mappings here.
    # Here is an example that pulls values out of the Regexp:
    #
    #  when /^the (notice|error|info) flash$/
    #    ".flash.#{$1}"
    
    when /the list of founding members/
      "table.pending_members"
    when /the list of pending members/
      "table.pending_members"
    when /the "(.+)" proposal/
      @proposal = @organisation.proposals.find_by_title($1)
      "#proposal_#{@proposal.id}"
    when /^the timeline$/
      "table.timeline"
    when /the list of directors/
      "table.members"

    # You can also return an array to use a different selector
    # type, like:
    #
    #  when /the header/
    #    [:xpath, "//header"]

    # This allows you to provide a quoted selector as the scope
    # for "within" steps as was previously the default for the
    # web steps:
    when /^"(.+)"$/
      $1

    else
      raise "Can't find mapping from \"#{locator}\" to a selector.\n" +
        "Now, go and add a mapping in #{__FILE__}"
    end
  end
When /^I choose yesterday for the date of election$/ do
  yesterday = 1.day.ago
  select(yesterday.year.to_s, :from => 'director[elected_on(1i)]')
  select(yesterday.strftime('%B'), :from => 'director[elected_on(2i)]')
  select(yesterday.day.to_s, :from => 'director[elected_on(3i)]')
end
When /^I check the certification checkbox$/ do
  check('director[certification]')
end
When /^I press "([^"]*)" for another director$/ do |button|
  @director = @company.members.where(["id <> ?", @user.id]).first
  within("tr#director_#{@director.id}") do
    click_button(button)
  end
end
When(/^I check the age check checkbox$/) do
  check('director[age_certification]')
end
Then /^I should see a form for standing down the director$/ do
  page.should have_selector("form[action='/directors/#{@director.id}/stand_down']")
  within("form[action='/directors/#{@director.id}/stand_down']") do
    page.should have_selector("select[name='director[stood_down_on(1i)]']")
    page.should have_selector("select[name='director[stood_down_on(2i)]']")
    page.should have_selector("select[name='director[stood_down_on(3i)]']")
    page.should have_selector("input[name='director[certification]']")
    page.should have_selector("input[type=submit]")
  end
end
When /^I submit the form to stand down the director$/ do
  yesterday = 1.day.ago
  within("form[action='/directors/#{@director.id}/stand_down']") do
    select(yesterday.year.to_s, :from => 'director[stood_down_on(1i)]')
    select(yesterday.strftime('%B'), :from => 'director[stood_down_on(2i)]')
    select(yesterday.day.to_s, :from => 'director[stood_down_on(3i)]')
    check('director[certification]')
    click_button("Stand this director down")
  end
end
When /^I add a new director$/ do
  step 'I go to the Directors page'
  step 'I press "Add a new director"'
  step 'I fill in "Email" with "bob@example.com"'
  step 'I fill in "First name" with "Bob"'
  step 'I fill in "Last name" with "Smith"'
  step 'I choose yesterday for the date of election'
  step 'I check the certification checkbox'
  step 'I check the age check checkbox'
  step 'I press "Add this director"'
end
When /^I stand down a director$/ do
  step 'I am on the Directors page'
  step 'I press "Stand down" for another director'
  step 'I submit the form to stand down the director'
end
Then /^I should not see the director$/ do
  page.should_not have_selector("tr#director_#{@director.id}")
end
Given /^I have received an email inviting me to become a founding member$/ do
  step "I have been invited to become a founding member"
  @email = last_email
end
Given /^I have received an email inviting me to become a member$/ do
  step "I have been invited to join the organisation"
  @email = last_email
end
Given /^I have received an email inviting me to sign up as a director$/ do
  step "I have been invited to sign up as a director"
  @email = last_email
end
Given /^I have received the email saying the founding vote has passed$/ do
  @email = last_email
  @email.subject.should include("has been formed")
end
When /^I click the link in the email$/ do
  follow_link_in_email
end
When /^I follow the invitation link in the email$/ do
  follow_link_in_email
end
Then /^I should receive a welcome email$/ do
  @email = last_email
  @email.to.should == [(@user ||= Member.last).email]
  @email.body.should =~ /created a draft constitution/
end
Then /^a director invitation email should be sent to "([^"]*)"$/ do |email_address|
  @emails = ActionMailer::Base.deliveries.select{|m| m.to == [email_address] && m.body =~ /You have been added as a director/}
  @emails.should_not be_empty
end
Then /^a founding member invitation email should be sent to "([^"]*)"$/ do |email_address|
  @email = last_email
  @email.to.should == [email_address]
  @email.body.should =~ /You've been invited by .* to become a founding member/
end
Then /^everyone should receive an email saying that the founding vote has started$/ do
  @organisation.members.each do |member|
    email = ActionMailer::Base.deliveries.select{|mail| mail.to.first == member.email}.first
    email.should be_present
    email.body.should =~ /has initiated a Founding Vote/
  end
end
Then /^everyone should receive an email saying the founding vote has passed$/ do
  @organisation.members.each do |member|
    email = ActionMailer::Base.deliveries.reverse.select{|mail| mail.to.first == member.email}.first
    email.body.should =~ /The Association has therefore been formed/
  end
end
Then /^the email should list the members who voted in favour of the founding$/ do
  @email ||= last_email
  @fap ||= @organisation.found_association_proposals.last
  
  for_members = @fap.votes.where(:for => true).map{|v| v.member}
  
  for_members.each do |m|
    @email.body.should include(m.name)
  end
end
Then /^the email should not list the member who voted against the founding$/ do
  @email ||= last_email
  @fap ||= @organisation.found_association_proposals.last
  
  against_members = @fap.votes.where(:for => false).map{|v| v.member}
  
  against_members.each do |m|
    @email.body.should_not include(m.name)
  end
end
Then /^everyone should receive an email notifying them of the proposal$/ do
  @proposal ||= Proposal.last
  @organisation.members.each do |member|
    email = ActionMailer::Base.deliveries.reverse.select{|mail| mail.to.first == member.email}.first
    email.body.should =~ Regexp.new(@proposal.title)
  end
end
Then /^I should receive an email notifying me of the new minutes$/ do
  @email = ActionMailer::Base.deliveries.reverse.select{|mail| mail.to.first == @user.email}.first
  @email.should be_present
  
  @company ||= Company.last
  @meeting ||= @company.meetings.last
  
  @email.subject.should include("minutes")
  @email.body.should include(@meeting.minutes)
end
Then /^I should see a link to the minutes in the email$/ do
  @email ||= last_email
  
  @meeting ||= Meeting.last
  
  @email.body.should include("#{@meeting.organisation.domain}/meetings/#{@meeting.to_param}")
end
Then /^all the directors should receive a "([^"]*)" email$/ do |subject_phrase|
  @organisation.directors.active.each do |director|
    mails = ActionMailer::Base.deliveries.select{|m| m.to.include?(director.email)}
    mails.select{|m| m.subject.include?(subject_phrase)}.should_not be_empty
  end
end
Then /^I should receive an email saying that member has resigned$/ do
  @member ||= @organisation.members.last
  @email = last_email
  @email.to.should == [(@user ||= @organisation.members.last).email]
  @email.body.should include(@member.name)
  @email.body.should include("resigned")
end
def last_email
  ActionMailer::Base.deliveries.last
end
def follow_link_in_email
  @email ||= last_email
  uri = URI.parse(@email.body.match(/(http:\/\/\S*)/)[1])
  subdomain = uri.host.split('.')[0]
  path = uri.path
  step %Q{the subdomain is "#{subdomain}"}
  visit(path)
end
def last_email
  ActionMailer::Base.deliveries.last
end
Given /^the application is set up$/ do
  # *.ocolocalhost.com resolves to 127.0.0.1. This lets us test subdomain
  # look-up using domains like 'company.ocolocalhost.com' and
  # 'association.ocolocalhost.com', without having to set up local wildcard
  # entries on each developer's machine and on the CI server.
  # 
  # N.B. This means some Cucumber scenarios will fail if your machine
  # isn't connected to the internet. We should probably fix this.
  # 
  # Port needs to be saved for Selenium tests (because our app code considers
  # the port as well as the hostname when figuring out how to handle a
  # request, and the Capybara app server doesn't run on port 80).
  # 
  # When using the rack-test driver, don't use port numbers at all,
  # since it makes our test-session-resetting code (see features/support/capybara_domains.rb)
  # more complicated.
  port_segment = Capybara.current_driver == :selenium ? ":#{Capybara.server_port}" : ''
  
  Setting[:base_domain] = "ocolocalhost.com#{port_segment}"
  Setting[:signup_domain] = "create.ocolocalhost.com#{port_segment}"
end
Given /^the application is not set up yet$/ do
  step "the domain is \"www.example.com\""
end
When /^the domain is the signup domain$/ do
  step %Q{the domain is "#{Setting[:signup_domain].sub(/:\d+$/, '')}"}
end
Given /^a company has been added$/ do
  @organisation = @company = Company.make!
end
Given /^the company has directors$/ do
  @company.directors.make!(2, :member_class => @company.member_classes.find_by_name('Director'))
end
Given /^I am a director of the company$/ do
  @company ||= Company.last
  director_member_class = @company.member_classes.find_by_name('Director')
  @user = @company.members.make!(:member_class => director_member_class)
end
Given /^there are two other directors of the company$/ do
  @company ||= Company.last
  director_member_class = @company.member_classes.find_by_name('Director')
  @company.members.make!(2, :member_class => director_member_class)
end
Given /^I have been stood down$/ do
  @user.eject!
end
Given /^the subdomain is the organisation's subdomain$/ do
  step %Q{the subdomain is "#{@organisation.subdomain}"}
end
Given /^the organisation's name is "([^"]*)"$/ do |new_organisation_name|
  @organisation ||= Organisation.last
  @organisation.clauses.set_text!(:organisation_name, new_organisation_name)
end
Then /^I should see a list of recent activity$/ do
  page.should have_css('table.timeline td.timestamp')
end
Given /^I have logged in$/ do
  user_logs_in
end
When /^I log in$/ do
  user_logs_in
end
When /^I try to log in$/ do
  user_logs_in
end
Then /^I should not be logged in$/ do
  page.should have_no_content("Logout")
end
def user_logs_in
  visit '/'
  fill_in('Email', :with => @user.email)
  fill_in('Password', :with => @user.password)
  click_button("Login")
end
Given /^I have created an association$/ do
  step "an association has been created"
  @user = @founder
  step "the subdomain is the organisation's subdomain"
  step "I have logged in"
end
Given /^an association has been created$/ do
  @organisation = @association = Association.make!(:state => 'pending')
  @founder = @organisation.members.make!(
    :member_class => @organisation.member_classes.find_by_name("Founder"),
    :inducted_at => nil,
    :state => 'pending'
  )
end
Given /^there are enough members to start the founding vote$/ do
  extra_members_needed = 3 - @organisation.members.count
  if extra_members_needed > 0
    # Add one extra so we can test what happens when someone abstains or
    # votes against the founding.
    (extra_members_needed + 1).times do
      @organisation.members.make!(:pending,
        :member_class => @organisation.member_classes.find_by_name("Founding Member")
      )
    end
  end
end
Given /^an association is active$/ do
  @organisation = @association = Association.make!(:state => 'active')
  3.times do
    @organisation.members.make!(
      :member_class => @organisation.member_classes.find_by_name("Member")
    )
  end
end
When /^I create an association$/ do
  step "I have created an association"
end
Then /^the organisation should be active$/ do
  @organisation.reload.should be_active
end
When /^I fill in the organisation name with "([^"]*)"$/ do |value|
  if page.first('input#constitution_proposal_bundle_organisation_name')
    fill_in('constitution_proposal_bundle_organisation_name', :with => value)
  else
    fill_in('constitution_organisation_name', :with => value)
  end
end
When /^I fill in the objectives with "([^"]*)"$/ do |value|
  if page.first('textarea#constitution_proposal_bundle_objectives')
    fill_in('constitution_proposal_bundle_objectives', :with => value)
  else
    fill_in('constitution_objectives', :with => value)
  end
end
When /^I choose "([^"]*)" for (.*) decisions$/ do |voting_system, decision_kind|
  within(".#{decision_kind}_decisions") do
    choose(voting_system)
  end
end
Then /^I should see the draft constitution$/ do
  @organisation ||= Organisation.last
  page.should have_css('h2', :text => "View the draft constitution")
  step "I should see the dynamic constitution clauses"
end
Then /^I should see the constitution$/ do
  @organisation ||= Organisation.last
  page.should have_css('h2', :text => "Constitution")
  step "I should see the dynamic constitution clauses"
end
Then /^I should see a clause with "([^"]*)"$/ do |clause_text|
  page.should have_css('ul.constitution li', :text => Regexp.new(clause_text))
end
Then /^the domain should be "([^"]*)"$/ do |domain|
  current_domain = URI.parse(current_url).host
  current_domain.should == domain
end
Then /^the subdomain should be "([^"]*)"$/ do |subdomain|
  current_subdomain = URI.parse(current_url).host.sub(".#{Setting[:base_domain].sub(/:\d+$/, '')}", '')
  current_subdomain.should == subdomain
end
Then /^I should get a "([^"]*)" download with the name of the organisation$/ do |extension|
  @organisation ||= Organisation.last
  page.response_headers['Content-Disposition'].should =~ Regexp.new("filename=\"#{Regexp.escape(@organisation.name)}.*#{Regexp.escape(extension)}\"")
end
Then /^I should see a welcome notification$/ do
  page.should have_css('.notification', :text => "The draft constitution")
end
Then /^I should see a list of the members who voted in favour of the founding$/ do
  @fap ||= @organisation.found_association_proposals.last
  
  for_members = @fap.votes.where(:for => true).map{|v| v.member}
  
  for_members.each do |m|
    page.should have_content(m.name)
  end
end
Then /^I should not see the member who voted against the founding$/ do
  @fap ||= @organisation.found_association_proposals.last
  
  against_members = @fap.votes.where(:for => false).map{|v| v.member}
  
  against_members.each do |m|
    page.should_not have_content(m.name)
  end
end
Given /^the founding vote has been started$/ do
  founder = @organisation.member_classes.where(:name => "Founder").first.members.first
  @organisation.found_association_proposals.make!(:proposer => founder)
  @organisation.propose!
end
Given /^another founding vote has been started$/ do
  sleep(1)
  founder = @organisation.member_classes.where(:name => "Founder").first.members.first
  @organisation.found_association_proposals.make!(:proposer => founder, :title => "A second voting proposal.")
  @organisation.reload
  @organisation.propose!
end
Given /^everyone has voted (to support|against) the founding$/ do |vote|
  fap = @organisation.found_association_proposals.last
  verdict = (vote == "against") ? "against" : "for"
  @organisation.members.each do |member|
    member.cast_vote(verdict.to_sym, fap)
  end
end
Given /^a proposal has been made$/ do
  @organisation.proposals.make!(:proposer => @organisation.members.active.first)
end
Given /^a proposal "([^"]*)" has been made$/ do |proposal_title|
  @organisation.proposals.make!(
    :title => proposal_title,
    :proposer => @organisation.members.active.first
  )
end
Given /^a proposal has been made to change the organisation name to "([^"]*)"$/ do |new_organisation_name|
  @proposal = @organisation.change_text_proposals.make!(
    :title => "Change organisation name to '#{new_organisation_name}'",
    :parameters => {
      'name' => 'organisation_name',
      'value' => new_organisation_name
    },
    :proposer => @organisation.members.active.first
  )
end
Given /^a proposal has been made to add a new member with name "([^"]*)" and email "([^"]*)"$/ do |name, email|
  first_name, last_name = name.split(' ')
  @proposal = @organisation.add_member_proposals.make!(
    :parameters => {
      'first_name' => first_name,
      'last_name' => last_name,
      'email' => email
    },
    :title => "Add #{first_name} #{last_name} as a member of #{@organisation.name}",
    :proposer => @organisation.members.active.first
  )
end
Given /^a proposal has been made to eject the member "([^"]*)"$/ do |email|
  member = @organisation.members.active.find_by_email(email)
  @proposal = @organisation.eject_member_proposals.make!(
    :parameters => {
      'member_id' => member.id
    },
    :title => "Eject #{member.first_name} #{member.last_name} from #{@organisation.name}",
    :proposer => @organisation.members.active.first
  )
end
Given /^the voting system for membership decisions is "([^"]*)"$/ do |voting_system|
  @organisation.constitution.change_voting_system('membership', voting_system)
end
Given /^one member voted against the founding$/ do
  @fap ||= @organisation.found_association_proposals.last
  
  # Don't make our user vote against the founding
  @members_against = if @user
    [(@organisation.members - [@user]).last]
  else
    [@organisation.members.last]
  end
    
  @members_against.each do |m|
    m.cast_vote(:against, @fap)
  end
end
Given /^the founding vote still passed$/ do
  members_in_favour = @organisation.members
  members_in_favour -= @members_against if @members_against
  
  if members_in_favour.length < @organisation.minimum_members_required_for_founding_vote
    raise RuntimeError, "not enough members left to pass founding vote"
  end
  
  @fap ||= @organisation.found_association_proposals.last
  
  members_in_favour.each do |m|
    m.cast_vote(:for, @fap)
  end
  
  Proposal.close_proposals
  
  @fap.reload
  raise RuntimeError, "expected founding vote to pass" unless @fap.passed?
end
When /^the proposal closer runs$/ do
  Proposal.close_proposals
end
When /^enough people vote in support of the proposal$/ do
  @proposal ||= Proposal.last
  (@organisation.members.active - [@proposal.proposer]).each do |member|
    member.cast_vote(:for, @proposal)
  end
end
Then /^I should see a proposal "([^"]*)"$/ do |proposal_title|
  page.should have_css('.open-proposals h4', :text => proposal_title)
end
Then /^I should see a proposal to add "([^"]*)" as a member$/ do |new_member_name|
  page.should have_css('.open-proposals h4', :text => "Add #{new_member_name} as a member of #{@organisation.name}")
end
Then /^I should see a proposal to eject "([^"]*)"$/ do |member_email|
  @member = @organisation.members.find_by_email(member_email)
  page.should have_css('.open-proposals h4', :text => "Eject #{@member.name} from #{@organisation.name}")
end
Then /^I should see a list of votes in progress$/ do
  page.should have_css('.open-proposals h4')
end
Given /^I am a founding member$/ do
  @user = @organisation.members.make!(:pending, :member_class => @organisation.member_classes.find_by_name("Founding Member"))
end
Given /^I have been invited to join the organisation$/ do
  @user ||= @organisation.members.make!(:pending, :send_welcome => true)
  @user.should_not be_inducted
end
Given /^I am a member of the organisation$/ do
  @user = @organisation.members.make!(
    :member_class => @organisation.member_classes.find_by_name('Member')
  )
end
Given /^I have been invited to sign up as a director$/ do
  @user ||= @organisation.directors.make!(:send_welcome => true, :state => 'pending')
end
Then /^my email should be "([^"]*)"$/ do |email|
  @user.reload.email.should == email
end
Given /^there is a member "([^"]*)"$/ do |member_email|
  @organisation.members.make!(
    :email => member_email,
    :member_class => @organisation.member_classes.find_by_name("Member")
  )
end
Given /^there are active members$/ do
  if @organisation.members.active.count < 1
    @organisation.members.make!(
      :member_class => @organisation.member_classes.find_by_name("Member")
    )
  end
end
Given /^there are pending members$/ do
  if @organisation.members.pending.count < 1
    @organisation.members.make!(:pending,
      :member_class => @organisation.member_classes.find_by_name("Member")
    )
  end
end
Given /^there is a member with name "([^"]*)" and email "([^"]*)"$/ do |name, email|
  first_name, last_name = name.split(' ')
  @member = @organisation.members.make!(
    :first_name => first_name,
    :last_name => last_name,
    :email => email,
    :member_class => @organisation.member_classes.find_by_name("Member")
  )
end
Given /^another member has resigned$/ do
  @member = @organisation.members.make!
  @member.resign!
end
Then /^I should see the list of members$/ do
  page.should have_css('table.members td a')
end
Then /^I should see a list of pending members$/ do
  page.should have_css('table.pending_members td a')
end
Then /^I should see the list of founding members$/ do
  @organisation ||= Organisation.last
  
  founder_member_class = @organisation.member_classes.find_by_name("Founder")
  founding_member_member_class = @organisation.member_classes.find_by_name("Founding Member")
  
  @organisation.members.all.select{ |m|
    m.member_class == founder_member_class || m.member_class == founding_member_member_class
  }.each do |member|
    page.should have_content member.name
    page.should have_content member.email
  end
end
Then /^I should see the member's details$/ do
  @member ||= @organisation.members.active.last
  page.should have_content(@member.name)
  page.should have_css("a[href='mailto:#{@member.email}']")
end
Then /^I should see a list of recent activity by the member$/ do
  page.should have_css('table.timeline td')
end
When /^I click on the resign link, and confirm my leaving$/ do
  click_link 'Edit your account'
  click_link_or_button "Resign"
  click_link_or_button "Resign"
end
Then /^I should be logged out, with a message telling me I have resigned\.$/ do
  page.should have_css "h2", :text => "You've resigned successfully"
  # page.should have_css '#notice', :text => 'resigned successfully'
  page.should have_content 'resigned successfully'
end
Then /^I should see the resignation in the timeline$/ do
  within('table.timeline') do
    page.should have_content("#{@member.name} resigned")
  end
end
When /^I enter a comment of "([^"]*)"$/ do |comment_body|
  fill_in('comment[body]', :with => comment_body)
end
Then /^I should see a comment by me saying "([^"]*)"$/ do |comment_body|
  page.should have_css('.comment p.attribution a', :text => @user.name)
  page.should have_css('.comment p', :text => comment_body)
end
Given /^another director has recorded some minutes$/ do
  @company ||= Company.last
  @meeting = @company.meetings.make!
end
Given /^another director has recorded some new minutes$/ do
  step "another director has recorded some minutes"
end
When /^I choose the date of discussion$/ do
  select('2011', :from => 'meeting[happened_on(1i)]')
  select('May', :from => 'meeting[happened_on(2i)]')
  select('1', :from => 'meeting[happened_on(3i)]')
end
When /^I check the first two directors' checkboxes$/ do
  @company ||= Company.last
  directors = @company.members.where(
    :member_class_id => @company.member_classes.find_by_name('Director').id
  ).limit(2).order('id ASC')
  directors.each do |director|
    check(director.name)
  end
end
Then /^I should see a form for recording minutes$/ do
  form_selector = "form[action='/meetings']"
  
  page.should have_css(form_selector)
  
  page.should have_css("#{form_selector} select[name='meeting[happened_on(1i)]']")
  page.should have_css("#{form_selector} select[name='meeting[happened_on(2i)]']")
  page.should have_css("#{form_selector} select[name='meeting[happened_on(3i)]']")
  
  page.should have_css("#{form_selector} textarea[name='meeting[minutes]']")
end
Then /^I should see a checkbox for each director$/ do
  @company ||= Company.last
  directors = @company.members.where(
    :member_class_id => @company.member_classes.find_by_name('Director').id
  )
  directors.each do |director|
    page.should have_css("input[type='checkbox'][name='meeting[participant_ids][#{director.id}]']")
  end
end
Then /^I should see the minutes for "([^"]*)" in the timeline$/ do |minutes|
  with_scope("the timeline") do
    page.should have_css("td", :text => minutes)
  end
end
Then /^I should see the first two directors' names as participants$/ do
  @company ||= Company.last
  directors = @company.members.where(
    :member_class_id => @company.member_classes.find_by_name('Director').id
  ).limit(2).order('id ASC')
  directors.each do |director|
    page.should have_selector('ul.participants li', :text => director.name)
  end
end
Then /^I should see the minutes$/ do
  @meeting ||= Meeting.last
  
  @meeting.participants.each do |participant|
    page.should have_selector('ul.participants li', :text => participant.name)
  end
  
  page.should have_content(@meeting.minutes)
  
  page.should have_content(@meeting.happened_on.to_s(:long_ordinal))
end
Given /^I have been invited to become a founding member$/ do
  @organisation.members.make!(:pending,
    :member_class => @organisation.member_classes.find_by_name("Founding Member"),
    :send_welcome => true
  )
end
Given /^the subdomain is "([^"]*)"$/ do |subdomain|
  step %Q{the domain is "#{subdomain}.#{Setting[:base_domain].sub(/:\d+$/, '')}"}
end
When /^the domain is "([^"]*)"$/ do |domain|
  if Capybara.current_driver == :selenium
    Capybara.default_host = "http://#{domain}:#{Capybara.server_port}"
    Capybara.app_host = "http://#{domain}:#{Capybara.server_port}"
  else
    Capybara.default_host = "http://#{domain}:#{Capybara.server_port}"
    Capybara.app_host = "http://#{domain}"
  end
end
Then /^I should see the dynamic constitution clauses$/ do
  page.should have_css('.dynamic', :text => @organisation.name)
  page.should have_css('.dynamic', :text => @organisation.objectives)
  
  page.should have_css('.dynamic',
    :text => VotingPeriods.name_for_value(@organisation.constitution.voting_period)
  )
  
  page.should have_css('.dynamic', :text =>
    @organisation.constitution.voting_system(:general).long_description
  )
  page.should have_css('.dynamic', :text =>
    @organisation.constitution.voting_system(:membership).long_description(:include_received => true)
  )
  page.should have_css('.dynamic', :text =>
    @organisation.constitution.voting_system(:constitution).long_description(:include_received => true)
  )
end
When /^the domain is "([^"]*)"$/ do |domain|
  if Capybara.current_driver == :selenium
    Capybara.default_host = "http://#{domain}:#{Capybara.server_port}"
    Capybara.app_host = "http://#{domain}:#{Capybara.server_port}"
  else
    Capybara.default_host = "http://#{domain}:#{Capybara.server_port}"
    Capybara.app_host = "http://#{domain}"
  end
end
