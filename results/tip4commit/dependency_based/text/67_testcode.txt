Given /^a GitHib user named "(.*?)" exists$/ do |nickname|
  mock_github_user nickname
end
Given /^I'm signed in as "(.*?)"$/ do |nickname|
  mock_github_user nickname
  visit root_path
  first(:link, "Sign in").click
  click_on "Sign in with Github"
  page.should have_content("Successfully authenticated")
end
Given /^I'm not signed in$/ do
  visit root_path
  if page.has_content?("Sign out")
    click_on "Sign out"
    page.should have_content("Signed out successfully")
  else
    page.should have_content("Sign in")
  end

  OmniAuth.config.test_mode = false
end
Given (/^I sign in as "(.*?)"$/) { |nickname| step "I'm signed in as \"#{nickname}\"" }
Given (/^I sign out$/) { step "I'm not signed in" }
Given(/^I visit the "(.*?)" page$/) do |page_string|
  visit parse_path_from_page_string page_string
end
Given(/^I browse to the explicit path "(.*?)"$/) do |url|
  visit url
end
Then(/^I should be on the "(.*?)" page$/) do |page_string|
  expected = parse_path_from_page_string page_string rescue expected = page_string
  actual   = page.current_path

  expected.chop! if (expected.end_with? '/') && (expected.size > 1)
  actual  .chop! if (actual  .end_with? '/') && (actual  .size > 1)

  actual.should eq expected
end
Given(/^I click "(.*?)"$/) do |arg1|
  click_on(arg1)
end
Given(/^I click "(.*?)" within the "(.*?)" area$/) do |link_text , node_name|
  within (find_element node_name) { click_on link_text }
end
Given(/^I check "(.*?)"$/) do |arg1|
  check(arg1)
end
Then(/^I should see "(.*?)"$/) do |arg1|
  page.should have_content(arg1)
end
Then(/^I should not see "(.*?)"$/) do |arg1|
  page.should have_no_content(arg1)
end
Given(/^I fill "(.*?)" with:$/) do |arg1, string|
  fill_in arg1, with: string
end
Given(/^I fill "(.*?)" with: "(.*?)"$/) do |text_field, string|
  fill_in text_field, with: string
end
Then(/^there should be (\d+) email sent$/) do |arg1|
  ActionMailer::Base.deliveries.size.should eq(arg1.to_i)
end
When(/^the email counters are reset$/) do
  ActionMailer::Base.deliveries.clear
end
When(/^I confirm the email address: "(.*?)"$/) do |email|
  mail      = ActionMailer::Base.deliveries.select {|ea| ea.to.first.eql? email}.first
  mail_body = mail.body.raw_source
  token     = mail_body.split('?confirmation_token=')[1].split('">Confirm my account').first
  visit "/users/confirmation?confirmation_token=#{token}"
end
Then  /^some magic stuff happens in the cloud$/ do ; true ; end ;
def mock_github_user nickname
  email = "#{nickname.parameterize}@example.com"

  OmniAuth.config.test_mode = true
  OmniAuth.config.mock_auth[:github] = {
    "info" => {
      "nickname"        => nickname ,
      "primary_email"   => email    ,
      "verified_emails" => [email]  ,
    },
  }.to_ostruct

  step "a user named \"#{nickname}\" exists without a bitcoin address"
end
def parse_path_from_page_string page_string
  path = nil

  # explicit cases
  # e.g. "a-user/a-project github-project edit"
  # e.g. "a-user user edit"
  tokens     = page_string.split ' '
  name       = tokens[0]
  model      = tokens[1]
  action     = tokens[2] || '' # '' => 'show'
  is_user    = model.eql? 'user'
  is_project = ['github-project' , 'bitbucket-project'].include? model
  if is_project
    projects_paths = ['' , 'edit' , 'decide_tip_amounts' , 'tips' , 'deposits']
    is_valid_path  = projects_paths.include? action
    service        = model.split('-').first
    path           = "/#{service}/#{name}/#{action}" if is_valid_path
  elsif is_user
    user_paths     = ['' , 'tips']
    is_valid_path  = user_paths.include? action
    path           = "/users/#{name}/#{action}" if is_valid_path # TODO: nyi

  # implicit cases
  else case page_string
    when 'home' ;            path = root_path ;
    when 'sign_up' ;         path = new_user_registration_path ;
    when 'sign_in' ;         path = new_user_session_path ;
    when 'users' ;           path = users_path ;
    when 'projects' ;        path = projects_path ;
    when 'search' ;          path = search_projects_path ;
    when 'tips' ;            path = tips_path ;
    when 'deposits' ;        path = deposits_path ;
    when 'withdrawals' ;     path = withdrawals_path ;
    end
  end

  path || (raise "unknown page")
end
def find_element node_name
  case node_name
  when "header" ; page.find '.masthead'
  end
end
def parse_path_from_page_string page_string
  path = nil

  # explicit cases
  # e.g. "a-user/a-project github-project edit"
  # e.g. "a-user user edit"
  tokens     = page_string.split ' '
  name       = tokens[0]
  model      = tokens[1]
  action     = tokens[2] || '' # '' => 'show'
  is_user    = model.eql? 'user'
  is_project = ['github-project' , 'bitbucket-project'].include? model
  if is_project
    projects_paths = ['' , 'edit' , 'decide_tip_amounts' , 'tips' , 'deposits']
    is_valid_path  = projects_paths.include? action
    service        = model.split('-').first
    path           = "/#{service}/#{name}/#{action}" if is_valid_path
  elsif is_user
    user_paths     = ['' , 'tips']
    is_valid_path  = user_paths.include? action
    path           = "/users/#{name}/#{action}" if is_valid_path # TODO: nyi

  # implicit cases
  else case page_string
    when 'home' ;            path = root_path ;
    when 'sign_up' ;         path = new_user_registration_path ;
    when 'sign_in' ;         path = new_user_session_path ;
    when 'users' ;           path = users_path ;
    when 'projects' ;        path = projects_path ;
    when 'search' ;          path = search_projects_path ;
    when 'tips' ;            path = tips_path ;
    when 'deposits' ;        path = deposits_path ;
    when 'withdrawals' ;     path = withdrawals_path ;
    end
  end

  path || (raise "unknown page")
end
When /^regarding the "(.*?)" project named "(.*?)"$/ do |service , project_name|
# @current_project is also assigned in create_github_project and create_bitbucket_project

  @current_project = find_project service , project_name
end
Given(/^a "(.*?)" project named "(.*?)" exists$/) do |service , project_name|
  service_do service , {'github'    => lambda {create_github_project    project_name} ,
                        'bitbucket' => lambda {create_bitbicket_project project_name} }
end
When /^the project syncs with the remote repo$/ do
  # in the real world a project has no information regarding commits
  #     nor collaborators until the project initially syncs
  project_owner_name = (@current_project.full_name.split '/').first
  @new_commits     ||= {@current_project.id => Hash.new}
  @collaborators   ||= [project_owner_name]
  @collaborators << project_owner_name unless @collaborators.include? project_owner_name

  step 'the new commits are loaded'
  step "the project collaborators are loaded"
end
Then /^there should (.*)\s*be a project avatar image visible$/ do |should|
  avatar_xpath = "//img[contains(@src, \"githubusercontent\")]"
  if should.eql? 'not '
    page.should_not have_xpath avatar_xpath
  else
    page.should have_xpath avatar_xpath
  end
end
Given(/^the project collaborators are:$/) do |table|
  @collaborators = []
  table.raw.each do |collaborator_name,|
    @collaborators << collaborator_name unless @collaborators.include? collaborator_name
  end
end
def find_project service , project_name
# TODO: subclass GithubProject , BitbucketProject , etc. (:host becomes :type)
  project = Project.where(:host => service , :full_name => project_name).first
  project or raise "Project '#{project_name.inspect}' not found"
end
def create_github_project project_name
  if (@github_project_1.present? && (project_name.eql? @github_project_1.full_name)) ||
     (@github_project_2.present? && (project_name.eql? @github_project_2.full_name))
    raise "duplicate project_name '#{project_name}'"
  elsif @github_project_3.present?
    raise "the maximum of three test projects already exist"
  end

# @current_project is also assigned in the "considering the .. project named ..." step
  @current_project = Project.create! :full_name       => project_name , # e.g. "me/my-project"
                                     :github_id       => Digest::SHA1.hexdigest(project_name) ,
                                     :bitcoin_address => 'mq4NtnmQoQoPfNWEPbhSvxvncgtGo6L8WY'
  if    @github_project_2.present? ; @github_project_3 = @current_project ;
  elsif @github_project_1.present? ; @github_project_2 = @current_project ;
  else                               @github_project_1 = @current_project ;
  end
end
def create_bitbicket_project project_name
  raise "unknown service" # nyi
end
Then(/^I should (.*)\s*see "(.*?)" in the "(.*?)" area$/) do |should , text , node_name|
  element = find_element node_name
  element.should ((should.eql? 'not ')? (have_no_content text) : (have_content text))
end
def find_element node_name
  case node_name
  when "header" ; page.find '.masthead'
  end
end
Given /^a user named "(.*?)" exists (with|without?) a bitcoin address$/ do |nickname , with|
  (@users ||= {})[nickname] ||= (create_user nickname , (with.eql? 'with'))
end
def create_user nickname , has_bitcoiin_address
  User.create do |user|
    user.name            = nickname
    user.email           = "#{nickname}@example.com"
    user.bitcoin_address = '1AFgARu7e5d8Lox6P2DSFX3MW8BtsVXEn5' if has_bitcoiin_address
    user.nickname        = nickname
    user.password        = Devise.friendly_token.first(Devise.password_length.min)
    user.skip_confirmation!
  end
end
Given(/^our fee is "(.*?)"$/) do |arg1|
  CONFIG["our_fee"] = arg1.to_f
end
Given(/^a deposit of "(.*?)" is made$/) do |deposit|
  Deposit.create!(project: @current_project, amount: deposit.to_d * 1e8, confirmations: 2)
end
Given(/^a new commit "([^"]*?)" is made by a user named "(.*?)"$/) do |commit_id , nickname|
  add_new_commit commit_id , nickname
end
Given(/^(\d+) new commit.? (?:is|are) made by a user named "(.*?)"$/) do |n_commits , nickname|
  n_commits.to_i.times do
    add_new_commit Digest::SHA1.hexdigest(SecureRandom.hex) , nickname
  end
end
Given(/^a new commit "([^"]*?)" is made$/) do |commit_id|
  add_new_commit commit_id , "unknown-user"
end
Given(/^a new commit "(.*?)" is made with parent "([^"]*?)"$/) do |commit_id, parent_commit_id|
  add_new_commit commit_id , "unknown-user" , parents: [{sha: parent_commit_id}]
end
Given(/^the author of commit "(.*?)" is "(.*?)"$/) do |commit_id , nickname|
  commit = find_new_commit commit_id
  raise "no such commit" if commit.nil?

  commit.deep_merge!(author: {login: nickname}, commit: {author: {email: "#{nickname}@example.com"}})
end
Given(/^the message of commit "(.*?)" is "(.*?)"$/) do |commit_id , commit_msg|
  commit = find_new_commit commit_id
  raise "no such commit" if commit.nil?

  commit.deep_merge!(commit: {message: commit_msg})
end
Given(/^the most recent commit is "(.*?)"$/) do |commit_id|
  @current_project.update! last_commit: commit_id
end
Then(/^the most recent commit should be "(.*?)"$/) do |commit_id|
  @current_project.reload.last_commit.should eq commit_id
end
Given(/^the project holds tips$/) do
  @current_project.update(hold_tips: true)
end
Then(/^there should be no tip for commit "(.*?)"$/) do |arg1|
  Tip.where(commit: arg1).to_a.should eq([])
end
Then(/^there should be a tip of "(.*?)" for commit "(.*?)"$/) do |arg1, arg2|
  amount = Tip.find_by(commit: arg2).amount
  amount.should_not be_nil
  (amount.to_d / 1e8).should eq(arg1.to_d)
end
Then(/^the tip amount for commit "(.*?)" should be undecided$/) do |arg1|
  Tip.find_by(commit: arg1).undecided?.should eq(true)
end
When(/^I choose the amount "(.*?)" on commit "(.*?)"$/) do |arg1, arg2|
  within find(".decide-tip-amounts-table tbody tr", text: arg2) do
    choose arg1
  end
end
When(/^I choose the amount "(.*?)" on all commits$/) do |arg1|
  all(".decide-tip-amounts-table tbody tr").each do |tr|
    within tr do
      choose arg1
    end
  end
end
When(/^I send a forged request to enable tip holding on the project$/) do
  page.driver.browser.process_and_follow_redirects(:patch, project_path(@current_project), project: {hold_tips: "1"})
end
Then(/^the project should not hold tips$/) do
  @current_project.reload.hold_tips.should eq(false)
end
Then(/^the project should hold tips$/) do
  @current_project.reload.hold_tips.should eq(true)
end
Given(/^the project has undedided tips$/) do
  create(:undecided_tip, project: @current_project)
  @current_project.reload.should have_undecided_tips
end
Given(/^the project has (\d+) undecided tip$/) do |arg1|
  @current_project.tips.undecided.each(&:destroy)
  create(:undecided_tip, project: @current_project)
  @current_project.reload.should have_undecided_tips
end
Given(/^I send a forged request to set the amount of the first undecided tip of the project$/) do
  tip = @current_project.tips.undecided.first
  tip.should_not be_nil
  params = {
    project: {
      tips_attributes: {
        "0" => {
          id: tip.id,
          amount_percentage: "5",
        },
      },
    },
  }

  page.driver.browser.process_and_follow_redirects(:patch, decide_tip_amounts_project_path(@current_project), params)
end
When(/^I send a forged request to change the percentage of commit "(.*?)" to "(.*?)"$/) do |commit , percentage|
  tip = @current_project.tips.detect { |t| t.commit == commit }
  tip.should_not be_nil
  params = {
    project: {
      tips_attributes: {
        "0" => {
          id: tip.id,
          amount_percentage: percentage,
        },
      },
    },
  }

  path = decide_tip_amounts_project_path @current_project
  page.driver.browser.process_and_follow_redirects :patch , path , params
end
Then(/^the project should have (\d+) undecided tips$/) do |arg1|
  @current_project.tips.undecided.size.should eq(arg1.to_i)
end
def add_new_commit commit_id , nickname , params = {}
  raise "duplicate commit_id" if (find_new_commit commit_id).present?

  defaults = {
    sha: commit_id,
    commit: {
      message: "Some changes",
      author: {
        email: "#{nickname}@example.com",
      },
    },
  }

  project_id                            = @current_project.id
  @new_commits                        ||= {}
  @new_commits[project_id]            ||= {}
  @new_commits[project_id][commit_id]   = defaults.deep_merge params
end
def find_new_commit commit_id
  (@new_commits || {}).each_value do |commits|
    return commits[commit_id] unless commits[commit_id].nil?
  end

  nil
end
Given /^I'm signed in as "(.*?)"$/ do |nickname|
  mock_github_user nickname
  visit root_path
  first(:link, "Sign in").click
  click_on "Sign in with Github"
  page.should have_content("Successfully authenticated")
end
def mock_github_user nickname
  email = "#{nickname.parameterize}@example.com"

  OmniAuth.config.test_mode = true
  OmniAuth.config.mock_auth[:github] = {
    "info" => {
      "nickname"        => nickname ,
      "primary_email"   => email    ,
      "verified_emails" => [email]  ,
    },
  }.to_ostruct

  step "a user named \"#{nickname}\" exists without a bitcoin address"
end
When(/^the new commits are loaded$/) do
  raise "no commits have been assigned" if @new_commits.nil?

  [@github_project_1 , @github_project_2 , @github_project_3].each do |project|
    next if project.nil?

    project.reload
    new_commits = @new_commits[project.id].values.map(&:to_ostruct)
    project.should_receive(:new_commits).and_return(new_commits)
    project.tip_commits
  end
end
Given(/^the project collaborators are loaded$/) do
  @current_project.reload
  @current_project.collaborators.each(&:destroy)
  @collaborators.each do |name,|
    @current_project.collaborators.create!(login: name)
  end
end
