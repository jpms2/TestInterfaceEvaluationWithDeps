Then(/^there should be (\d+) email sent$/) do |arg1|
  ActionMailer::Base.deliveries.size.should eq(arg1.to_i)
end
When(/^the email counters are reset$/) do
  ActionMailer::Base.deliveries.clear
end
Given(/^our fee is "(.*?)"$/) do |arg1|
  CONFIG["our_fee"] = arg1.to_f
end
Given(/^a project$/) do
  @project = Project.create!(full_name: "example/test", github_id: 123, bitcoin_address: 'mq4NtnmQoQoPfNWEPbhSvxvncgtGo6L8WY')
end
Given(/^a project "(.*?)"$/) do |arg1|
  @project = Project.create!(full_name: "example/#{arg1}", github_id: Digest::SHA1.hexdigest(arg1), bitcoin_address: 'mq4NtnmQoQoPfNWEPbhSvxvncgtGo6L8WY')
end
Given(/^a deposit of "(.*?)"$/) do |arg1|
  Deposit.create!(project: @project, amount: arg1.to_d * 1e8, confirmations: 1)
end
Given(/^the last known commit is "(.*?)"$/) do |arg1|
  @project.update!(last_commit: arg1)
end
Given(/^a new commit "(.*?)" with parent "([^"]*?)"$/) do |arg1, arg2|
  add_new_commit(arg1, parents: [{sha: arg2}])
end
Given(/^(\d+) new commits$/) do |arg1|
  arg1.to_i.times do
    add_new_commit(Digest::SHA1.hexdigest(SecureRandom.hex))
  end
end
Given(/^a new commit "([^"]*?)"$/) do |arg1|
  add_new_commit(arg1)
end
Given(/^the project holds tips$/) do
  @project.update(hold_tips: true)
end
Given(/^the message of commit "(.*?)" is "(.*?)"$/) do |arg1, arg2|
  find_new_commit(arg1).deep_merge!(commit: {message: arg2})
end
When(/^the new commits are read$/) do
  @project.reload
  @project.should_receive(:new_commits).and_return(@new_commits.values.map(&:to_ostruct))
  @project.tip_commits
end
Then(/^there should be a tip of "(.*?)" for commit "(.*?)"$/) do |arg1, arg2|
  amount = Tip.find_by(commit: arg2).amount
  amount.should_not be_nil
  (amount.to_d / 1e8).should eq(arg1.to_d)
end
Then(/^the tip amount for commit "(.*?)" should be undecided$/) do |arg1|
  Tip.find_by(commit: arg1).undecided?.should eq(true)
end
Given(/^the project collaborators are:$/) do |table|
  @project.reload
  @project.collaborators.each(&:destroy)
  table.raw.each do |name,|
    @project.collaborators.create!(login: name)
  end
end
Given(/^the author of commit "(.*?)" is "(.*?)"$/) do |arg1, arg2|
  find_new_commit(arg1).deep_merge!(author: {login: arg2}, commit: {author: {email: "#{arg2}@example.com"}})
end
def add_new_commit(id, params = {})
  @new_commits ||= {}
  defaults = {
    sha: id,
    commit: {
      message: "Some changes",
      author: {
        email: "anonymous@example.com",
      },
    },
  }
  @new_commits[id] = defaults.deep_merge(params)
end
def find_new_commit(id)
  @new_commits[id]
end
Given(/^I'm logged in as "(.*?)"$/) do |arg1|
  OmniAuth.config.test_mode = true
  OmniAuth.config.mock_auth[:github] = {
    "info" => {
      "nickname" => arg1,
      "primary_email" => "#{arg1.gsub(/\s+/,'')}@example.com",
      "verified_emails" => [],
    },
  }.to_ostruct
  visit root_path
  click_on "Sign in"
  click_on "Sign in with Github"
  page.should have_content("Successfully authenticated")
end
Given(/^I'm not logged in$/) do
  visit root_path
  if page.has_content?("Sign Out")
    click_on "Sign Out"
    page.should have_content("Signed out successfully")
  else
    page.should have_content("Sign in")
  end
end
Given(/^I go to the project page$/) do
  visit project_path(@project)
end
Given(/^I click on "(.*?)"$/) do |arg1|
  click_on(arg1)
end
Given(/^I check "(.*?)"$/) do |arg1|
  check(arg1)
end
Then(/^I should see "(.*?)"$/) do |arg1|
  page.should have_content(arg1)
end
Then(/^I should not see "(.*?)"$/) do |arg1|
  page.should have_no_content(arg1)
end
Given(/^I fill "(.*?)" with:$/) do |arg1, string|
  fill_in arg1, with: string
end
When(/^I choose the amount "(.*?)" on commit "(.*?)"$/) do |arg1, arg2|
  within find(".decide-tip-amounts-table tbody tr", text: arg2) do
    choose arg1
  end
end
When(/^I choose the amount "(.*?)" on all commits$/) do |arg1|
  all(".decide-tip-amounts-table tbody tr").each do |tr|
    within tr do
      choose arg1
    end
  end
end
When(/^I go to the edit page of the project$/) do
  visit edit_project_path(@project)
end
When(/^I send a forged request to enable tip holding on the project$/) do
  page.driver.browser.process_and_follow_redirects(:patch, project_path(@project), project: {hold_tips: "1"})
end
Then(/^I should see an access denied$/) do
  page.should have_content("Access denied")
end
Then(/^the project should not hold tips$/) do
  @project.reload.hold_tips.should eq(false)
end
Then(/^the project should hold tips$/) do
  @project.reload.hold_tips.should eq(true)
end
Given(/^the project has undedided tips$/) do
  create(:undecided_tip, project: @project)
  @project.reload.should have_undecided_tips
end
Given(/^the project has (\d+) undecided tip$/) do |arg1|
  @project.tips.undecided.each(&:destroy)
  create(:undecided_tip, project: @project)
  @project.reload.should have_undecided_tips
end
Given(/^I send a forged request to set the amount of the first undecided tip of the project$/) do
  tip = @project.tips.undecided.first
  tip.should_not be_nil
  params = {
    project: {
      tips_attributes: {
        "0" => {
          id: tip.id,
          amount_percentage: "5",
        },
      },
    },
  }

  page.driver.browser.process_and_follow_redirects(:patch, decide_tip_amounts_project_path(@project), params)
end
When(/^I send a forged request to change the percentage of commit "(.*?)" on project "(.*?)" to "(.*?)"$/) do |arg1, arg2, arg3|
  project = find_project(arg2)
  tip = project.tips.detect { |t| t.commit == arg1 }
  tip.should_not be_nil
  params = {
    project: {
      tips_attributes: {
        "0" => {
          id: tip.id,
          amount_percentage: arg3,
        },
      },
    },
  }

  page.driver.browser.process_and_follow_redirects(:patch, decide_tip_amounts_project_path(project), params)
end
Then(/^the project should have (\d+) undecided tips$/) do |arg1|
  @project.tips.undecided.size.should eq(arg1.to_i)
end
def find_project(name)
  project = Project.where(full_name: "example/#{name}").first
  project or raise "Project #{name.inspect} not found"
end
