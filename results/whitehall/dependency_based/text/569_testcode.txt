Given /^I am (?:a|an) (writer|editor|admin|GDS editor|GDS admin|importer|managing editor)(?: called "([^"]*)")?$/ do |role, name|
  @user = case role
  when "writer"
    create(:writer, name: (name || "Wally Writer"))
  when "editor"
    create(:departmental_editor, name: (name || "Eddie Depteditor"))
  when "admin"
    create(:user)
  when "GDS editor"
    create(:gds_editor)
  when "GDS admin"
    create(:gds_admin)
  when 'importer'
    create(:importer)
  when 'managing editor'
    create(:managing_editor)
  end
  login_as @user
end
Given /^I am (?:an?) (admin|writer|editor|GDS editor) in the organisation "([^"]*)"$/ do |role, organisation_name|
  organisation = Organisation.find_by(name: organisation_name) || create_org_and_stub_content_store(:ministerial_department, name: organisation_name)
  @user = case role
  when "admin"
    create(:user, organisation: organisation)
  when "writer"
    create(:writer, name: "Wally Writer", organisation: organisation)
  when "editor"
    create(:departmental_editor, name: "Eddie Depteditor", organisation: organisation)
  when "GDS editor"
    create(:gds_editor, organisation: organisation)
  end
  login_as @user
end
  def login_as(user)
    GDS::SSO.test_user = user
    Edition::AuditTrail.whodunnit = user
    super(user) # warden
  end
Given /^a published document "([^"]*)" exists$/ do |title|
  create(:published_publication, title: title)
end
Given /^a submitted (publication|news article|consultation|speech|detailed guide) "([^"]*)" exists$/ do |document_type, title|
  create("submitted_#{document_class(document_type).name.underscore}".to_sym, title: title)
end
When /^I publish (#{THE_DOCUMENT})$/ do |edition|
  visit_edition_admin edition.title
  publish
end
When /^I force publish (#{THE_DOCUMENT})$/ do |edition|
  visit_edition_admin edition.title, :draft
  click_link "Edit draft"
  fill_in_change_note_if_required
  click_button "Save"
  publish(force: true)
end
Then /^I should see (#{THE_DOCUMENT})$/ do |edition|
  assert has_css?(record_css_selector(edition))
end
  def document_class(type)
    type = 'edition' if type == 'document'
    type.gsub(" ", "_").classify.constantize
  end
  def visit_edition_admin(title, scope = :all)
    document = Edition.send(scope).find_by(title: title)
    visit admin_edition_path(document)
  end
  def fill_in_change_note_if_required
    if has_css?("textarea[name='edition[change_note]']", wait: false)
      fill_in "edition_change_note", with: "changes"
    end
  end
  def publish(options = {})
    if options[:force]
      click_link "Force publish"
      page.has_css?(".force-publish-form", visible: true)
      within '.force-publish-form' do
        fill_in 'reason', with: "because"
        click_button 'Force publish'
      end
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    else
      click_button "Publish"
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    end
  end
  def refute_flash_alerts_exist
    assert has_no_css?(".flash.alert")
  end
  def admin_edition_path(edition, *args)
    polymorphic_path([:admin, edition], *args)
  end
Given(/^a closed consultation exists$/) do
  create(:closed_consultation)
end
When /^I add an outcome to the consultation$/ do
  visit edit_admin_consultation_path(Consultation.last)
  click_button "Create new edition"

  click_link "Final outcome"
  fill_in "Detail/Summary", with: "Outcome summary"
  click_button "Save"

  upload_new_attachment(pdf_attachment, "Outcome attachment title")
end
When(/^I add public feedback to the consultation$/) do
  visit edit_admin_consultation_path(Consultation.last)
  click_button "Create new edition"

  click_link "Public feedback"
  fill_in "Summary", with: "Feedback summary"
  click_button "Save"

  upload_new_attachment(pdf_attachment, "Feedback attachment title")
end
When /^I save and publish the amended consultation$/ do
  ensure_path edit_admin_consultation_path(Consultation.last)
  fill_in_change_note_if_required
  click_button "Save"
  publish force: true
end
Then(/^I can see that the consultation has been published$/) do
  expected_title = Consultation.last.title
  expected_message = "The document #{expected_title} has been published"

  assert has_css?('.flash', text: expected_message)
end
  def pdf_attachment
    Rails.root.join('features/fixtures/attachment.pdf')
  end
  def fill_in_change_note_if_required
    if has_css?("textarea[name='edition[change_note]']", wait: false)
      fill_in "edition_change_note", with: "changes"
    end
  end
  def publish(options = {})
    if options[:force]
      click_link "Force publish"
      page.has_css?(".force-publish-form", visible: true)
      within '.force-publish-form' do
        fill_in 'reason', with: "because"
        click_button 'Force publish'
      end
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    else
      click_button "Publish"
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    end
  end
  def upload_new_attachment(file_path, attachment_title)
    click_link "Upload new file attachment"
    fill_in "Title", with: attachment_title
    attach_file "File", file_path
    click_button "Save"
    Attachment.find_by(title: attachment_title)
  end
When(/^I draft a new document collection called "(.*?)"$/) do |title|
  begin_drafting_document_collection(title: title)
  click_on "Save"
  @document_collection = DocumentCollection.find_by!(title: title)
end
When(/^I add the document "(.*?)" to the document collection$/) do |document_title|
  doc_edition = Edition.find_by!(title: document_title)
  refute @document_collection.nil?, "No document collection to act on."

  visit admin_document_collection_path(@document_collection)
  click_on "Edit draft"
  click_on "Collection documents"

  fill_in 'title', with: document_title
  click_on 'Find'
  find('li.ui-menu-item').click
  click_on 'Add'

  within ('section.group') do
    assert page.has_content? doc_edition.title
  end
end
When(/^I move "(.*?)" before "(.*?)" in the document collection$/) do |doc_title_1, doc_title_2|
  refute @document_collection.nil?, "No document collection to act on."

  visit admin_document_collection_path(@document_collection)
  click_on "Edit draft"
  click_on "Collection documents"

  #Simulate drag-droping document.
  page.execute_script %Q{
    (function($) {
      var doc_1_li = $('.document-list li:contains(#{doc_title_1})');
      if(doc_1_li.length == 0) throw("Couldn't find li for document '#{doc_title_1}' in .document-list.");

      var doc_2_li = $('.document-list li:contains(#{doc_title_2})');
      if(doc_2_li.length == 0) throw("Couldn't find li for document '#{doc_title_2}' in .document-list.");

      doc_2_li.before(doc_1_li.remove());

      GOVUK.instances.DocumentGroupOrdering[0].onDrop({}, {item: doc_1_li});
    })(jQuery);
  }
  # Wait for post to complete
  assert page.has_no_css?(".loading-spinner")
end
Then(/^I (?:can )?view the document collection in the admin$/) do
  refute @document_collection.nil?, "No document collection to act on."

  visit admin_document_collection_path(@document_collection)
  click_on "Edit draft"
  click_on "Collection documents"
  assert page.has_selector?("h1", text: @document_collection.title)
end
Then(/^I can see in the admin that "(.*?)" is part of the document collection$/) do |document_title|
  visit admin_document_collection_path(@document_collection)
  click_on "Edit draft"
  click_on "Collection documents"

  assert_document_is_part_of_document_collection(document_title)
end
Given(/^a published publication called "(.*?)" in a published document collection$/) do |publication_title|
  @publication = create(:published_publication, title: publication_title)
  @document_collection = create(:published_document_collection,
    groups: [build(:document_collection_group, documents: [@publication.document])]
  )
  @group = @document_collection.groups.first
end
When(/^I redraft the document collection and remove "(.*?)" from it$/) do |document_title|
  refute @document_collection.nil?, "No document collection to act on."

  visit admin_document_collection_path(@document_collection)
  click_on "Create new edition to edit"
  click_on "Collection documents"

  check document_title
  click_on "Remove"
end
Then(/^I can see in the admin that "(.*?)" does not appear$/) do |document_title|
  refute_document_is_part_of_document_collection(document_title)
end
Then(/^I see that "(.*?)" is before "(.*?)" in the document collection$/) do |doc_title_1, doc_title_2|
  assert page.has_content? doc_title_1
  assert page.body.index(doc_title_1) < page.body.index(doc_title_2), "Expected #{doc_title_1} to be before #{doc_title_2}"
end
  def begin_drafting_document_collection(options)
    begin_drafting_document options.merge(type: 'document_collection', previously_published: false)
  end
  def assert_document_is_part_of_document_collection(document_title)
    within '.tab-content' do
      assert page.has_content? document_title
    end
  end
  def refute_document_is_part_of_document_collection(document_title)
    within '.tab-content' do
      assert page.has_no_content? document_title
    end
  end
  def begin_drafting_document(options)
    if Organisation.count == 0
      create(:organisation)
    end
    if Topic.count == 0
      create(:topic)
    end
    visit admin_root_path
    # Make sure the dropdown is visible first, otherwise Capybara won't see the links
    find('li.create-new a', text: 'New document').click
    within 'li.create-new' do
      click_link options[:type].humanize
    end

    within 'form' do
      fill_in "edition_title", with: options[:title]
      fill_in "edition_body", with: options.fetch(:body, "Any old iron")
      fill_in "edition_summary", with: options.fetch(:summary, 'one plus one euals two!')
      fill_in_change_note_if_required
      select_topic_if_required unless options[:skip_topic_selection]

      unless options[:type] == 'world_location_news_article'
        set_lead_organisation_on_document(Organisation.first)
      end

      if options[:alternative_format_provider]
        select options[:alternative_format_provider].name, from: "edition_alternative_format_provider_id"
      end

      case options[:previously_published]
      when false
        choose 'has never been published before. It is new.'
      when true
        choose 'has previously been published on another website.'
      end

    end
  end
  def set_lead_organisation_on_document(organisation, order = 1)
    select organisation.name, from: "edition_lead_organisation_ids_#{order}"
  end
  def fill_in_change_note_if_required
    if has_css?("textarea[name='edition[change_note]']", wait: false)
      fill_in "edition_change_note", with: "changes"
    end
  end
  def select_topic_if_required
    if has_css?(".edition-topic-fields", wait: false)
      within(".edition-topic-fields") do
        select Topic.first.name, from: "Policy Areas"
      end
    end
  end
  def select(value, options = {})
    if options.has_key?(:from)
      element = find(:select, options[:from], visible: :all).find(:option, value, visible: :all)
      if element.visible?
        from = options.delete(:from)
        find(:select, from, options).find(:option, value, options).select_option
      else
        select_from_chosen(value, options)
      end
    else
      find(:option, value, options).select_option
    end
  end
  def select_from_chosen(value, options = {})
    field = find_field(options[:from], visible: false, match: :first)
    option_value = page.evaluate_script("$(\"##{field[:id]} option:contains('#{value}')\").val()")

    if field[:multiple]
      page.execute_script("value = ['#{option_value}']\; if ($('##{field[:id]}').val()) {$.merge(value, $('##{field[:id]}').val())}")
      option_value = page.evaluate_script("value")
    end

    page.execute_script("$('##{field[:id]}').val(#{option_value.to_json})")
    page.execute_script("$('##{field[:id]}').trigger('liszt:updated').trigger('change')")
  end
Given(/^a topical event called "(.*?)" with description "(.*?)"$/) do |name, description|
  @topical_event = create(:topical_event, name: name, description: description)
  stub_topical_event_in_content_store(name)
end
When /^I draft a new consultation "([^"]*)" relating it to topical event "([^"]*)"$/ do |consultation_title, topical_event_name|
  begin_drafting_consultation title: consultation_title
  select topical_event_name, from: "Topical events"
  click_button "Save"
end
  def stub_topical_event_in_content_store(name)
    content_item = {
      format: "topical_event",
      title: name,
    }

    base_path = topical_event_path(TopicalEvent.find_by!(name: name))

    content_store_has_item(base_path, content_item)
  end
  def begin_drafting_consultation(options)
    begin_drafting_document(options.merge(type: "consultation"))
    select_date 10.days.from_now.to_s, from: "Opening Date"
    select_date 40.days.from_now.to_s, from: "Closing Date"
  end
Given /^a worldwide organisation that is translated exists$/ do
  world_location = create(:world_location)
  worldwide_organisation = create(:worldwide_organisation,
    world_locations: [world_location],
    name: "en-organisation",
    translated_into: {fr: {name: "fr-organisation"}}
  )
  create(:about_corporate_information_page, organisation: nil,
         worldwide_organisation: worldwide_organisation,  summary: "en-summary",
         translated_into: {fr: {summary: "fr-summary"}}
  )
end
When /^I visit the world organisation that is translated$/ do
  visit worldwide_organisation_path(WorldwideOrganisation.last, locale: "fr")
end
Given /^a worldwide organisation "([^"]*)" exists for the world location "([^"]*)" with translations into "([^"]*)"$/ do |name, country_name, translation|
  country = create(:world_location, translated_into: [translation])
  create(:worldwide_organisation, name: name, world_locations: [country])
end
When /^I add a new translation to the worldwide organisation "([^"]*)" with:$/ do |name, table|
  worldwide_organisation = WorldwideOrganisation.find_by!(name: name)
  add_translation_to_worldwide_organisation(worldwide_organisation, table.rows_hash)
end
Then /^when viewing the worldwide organisation "([^"]*)" with the locale "([^"]*)" I should see:$/ do |name, locale, table|
  worldwide_organisation = WorldwideOrganisation.find_by!(name: name)
  translation = table.rows_hash

  visit worldwide_organisation_path(worldwide_organisation, locale: locale)

  assert page.has_css?('.summary', text: translation["summary"]), "Summary wasn't present"
  assert page.has_css?('.description', text: translation["description"]), "Description wasn't present"
  assert page.has_css?('.content', text: translation["services"]), "Services wasn't present"
end
Given /^a worldwide organisation "([^"]*)" exists with a translation for the locale "([^"]*)"$/ do |name, native_locale_name|
  locale_code = Locale.find_by_language_name(native_locale_name).code
  country = create(:world_location, world_location_type: WorldLocationType::WorldLocation)
  create(:worldwide_organisation, name: name, world_locations: [country], translated_into: [locale_code])
end
When /^I edit the "([^"]*)" translation for the worldwide organisation "([^"]*)" setting:$/ do |locale, name, table|
  edit_translation_for_worldwide_organisation(locale, name, table.rows_hash)
end
  def add_translation_to_worldwide_organisation(worldwide_organisation, translation)
    translation = translation.stringify_keys
    visit admin_worldwide_organisations_path
    within record_css_selector(worldwide_organisation) do
      click_link worldwide_organisation.name
    end
    click_link "Translations"

    select translation["locale"], from: "Locale"
    click_on "Create translation"
    fill_in "Name", with: translation["name"]
    click_on "Save"
  end
  def edit_translation_for_worldwide_organisation(locale, worldwide_organisation_name, translation)
    worldwide_organisation = WorldwideOrganisation.find_by!(name: worldwide_organisation_name)
    visit admin_worldwide_organisations_path

    within record_css_selector(worldwide_organisation) do
      click_link locale
    end

    fill_in "Name", with: translation["name"]
    click_on "Save"
  end
Given /^an? (world location|international delegation) "([^"]*)" exists$/ do |world_location_type, name|
  WorldLocationNewsPageWorker.any_instance.stubs(:perform).returns(true)
  create(world_location_type.gsub(' ', '_').to_sym, name: name)
end
