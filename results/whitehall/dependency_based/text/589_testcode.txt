Given /^I am (?:a|an) (writer|editor|admin|GDS editor|GDS admin|importer|managing editor)(?: called "([^"]*)")?$/ do |role, name|
  @user = case role
  when "writer"
    create(:writer, name: (name || "Wally Writer"))
  when "editor"
    create(:departmental_editor, name: (name || "Eddie Depteditor"))
  when "admin"
    create(:user)
  when "GDS editor"
    create(:gds_editor)
  when "GDS admin"
    create(:gds_admin)
  when 'importer'
    create(:importer)
  when 'managing editor'
    create(:managing_editor)
  end
  login_as @user
end
  def login_as(user)
    GDS::SSO.test_user = user
    Edition::AuditTrail.whodunnit = user
    super(user) # warden
  end
When /^I start drafting a new publication "([^"]*)"$/ do |title|
  begin_drafting_publication(title)
  click_button "Save"
end
  def begin_drafting_publication(title, options = {})
    begin_drafting_document type: 'publication', title: title, summary: "Some summary of the content", alternative_format_provider: create(:alternative_format_provider)
    fill_in_publication_fields(options)
  end
When(/^I start editing the attachments from the .*? page$/) do
  click_on 'Modify attachments'
end
When(/^I upload an html attachment with the title "(.*?)" and the isbn "(.*?)" and the web isbn "(.*?)" and the contact address "(.*?)"$/) do |title, isbn, web_isbn, contact_address|
  click_on "Add new HTML attachment"
  fill_in "Title", with: title
  fill_in "Print ISBN", with: isbn
  fill_in "Web ISBN", with: web_isbn
  fill_in "Organisation's Contact Details", with: contact_address
  fill_in "Body", with: "Body"
  check "Manually numbered headings"
  click_on "Save"
end
When(/^I publish the draft edition for publication "(.*?)"$/) do |publication_title|
  publication = Publication.find_by title: publication_title
  publication.update!(state: 'published', major_change_published_at: Date.today)
end
Then /^previewing the html attachment "(.*?)" in print mode includes the contact address "(.*?)" and the isbn "(.*?)" and the web isbn "(.*?)"$/ do |attachment_title, contact_address, isbn, web_isbn|
  html_attachment = HtmlAttachment.find_by title: attachment_title
  publication = html_attachment.attachable
  visit publication_html_attachment_path publication_id: publication.slug, id: html_attachment.slug, medium: "print"
  assert page.has_content? contact_address
  assert page.has_content? isbn
  assert page.has_content? web_isbn
end
Given /^a submitted (publication|news article|consultation|speech|detailed guide) "([^"]*)" exists$/ do |document_type, title|
  create("submitted_#{document_class(document_type).name.underscore}".to_sym, title: title)
end
When /^I preview "([^"]*)"$/ do |title|
  edition = Edition.find_by!(title: title)
  visit preview_document_path(edition)
end
When /^I publish (#{THE_DOCUMENT})$/ do |edition|
  visit_edition_admin edition.title
  publish
end
When /^I force publish (#{THE_DOCUMENT})$/ do |edition|
  visit_edition_admin edition.title, :draft
  click_link "Edit draft"
  fill_in_change_note_if_required
  click_button "Save"
  publish(force: true)
end
Then /^I should see (#{THE_DOCUMENT})$/ do |edition|
  assert has_css?(record_css_selector(edition))
end
  def document_class(type)
    type = 'edition' if type == 'document'
    type.gsub(" ", "_").classify.constantize
  end
  def visit_edition_admin(title, scope = :all)
    document = Edition.send(scope).find_by(title: title)
    visit admin_edition_path(document)
  end
  def fill_in_change_note_if_required
    if has_css?("textarea[name='edition[change_note]']", wait: false)
      fill_in "edition_change_note", with: "changes"
    end
  end
  def publish(options = {})
    if options[:force]
      click_link "Force publish"
      page.has_css?(".force-publish-form", visible: true)
      within '.force-publish-form' do
        fill_in 'reason', with: "because"
        click_button 'Force publish'
      end
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    else
      click_button "Publish"
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    end
  end
  def refute_flash_alerts_exist
    assert has_no_css?(".flash.alert")
  end
  def preview_document_path(edition, options = {})
    query = { preview: edition.latest_edition.id, cachebust: Time.zone.now.getutc.to_i }
    document_path(edition, options.merge(query))
  end
  def admin_edition_path(edition, *args)
    polymorphic_path([:admin, edition], *args)
  end
Given /^an? (world location|international delegation) "([^"]*)" exists$/ do |world_location_type, name|
  create(world_location_type.gsub(' ', '_').to_sym, name: name)
end
Given /^an? (world location|international delegation) "([^"]*)" exists with a translation for the locale "([^"]*)"$/ do |world_location_type, name, locale|
  location = create(world_location_type.gsub(' ', '_').to_sym, name: name)
  locale = Locale.find_by_language_name(locale)

  translation = LocalisedModel.new(location, locale.code)
  translation.name = 'Unimportant'
  translation.title = 'Unimportant'
  translation.save!
end
When /^I view the (?:world location|international delegation) "([^"]*)"$/ do |name|
  world_location = WorldLocation.find_by!(name: name)
  visit world_location_path(world_location)
end
Given /^a world location "([^"]*)" exists in both english and french$/ do |name|
  location = create(:world_location, name: name)
  add_translation_to_world_location(location, locale: "French", name: 'Unimportant', mission_statement: 'Unimportant')
end
Given /^there is a news article "([^"]*)" in english \("([^"]*)" in french\) related to the world location$/ do |english_title, french_title|
  world_location = WorldLocation.last
  create(:published_news_article, title: english_title, world_locations: [world_location], translated_into: {
    fr: {
      title: french_title
    }
  })
end
When /^I feature "([^"]*)" on the french "([^"]*)" page$/ do |news_article_title, world_location_name|
  feature_news_article_in_world_location(news_article_title, world_location_name, nil, "Français")
end
def feature_news_article_in_world_location(news_article_title, world_location_name, image_filename = nil, locale = "English")
  image_filename ||= 'minister-of-funk.960x640.jpg'
  world_location = WorldLocation.find_by!(name: world_location_name)
  visit admin_world_location_path(world_location)
  click_link "Features (#{locale})"
  locale = Locale.find_by_language_name(locale)
  news_article = LocalisedModel.new(NewsArticle, locale.code).find_by(title: news_article_title)
  within ".filter-options" do
    select "All locations", from: :world_location
    click_button "Search"
  end
  within record_css_selector(news_article) do
    click_link "Feature"
  end
  attach_file "Select a 960px wide and 640px tall image to be shown when featuring", Rails.root.join("test/fixtures/#{image_filename}")
  fill_in :feature_alt_text, with: "An accessible description of the image"
  click_button "Save"
end
Given(/^govuk delivery exists$/) do
  mock_govuk_delivery_client
end
Given(/^email alert api exists$/) do
  mock_email_alert_api
end
When(/^I sign up for emails$/) do
  within '.feeds' do
    click_on 'email'
  end

  # There is a bug which is causes external urls to get requested from the
  # server. So catch the routing error and handle it so we can continue to
  # assert that the right things have happened to generate the redirect.
  begin
    click_on 'Create subscription'
  rescue ActionController::RoutingError
  end
end
Then(/^I should be signed up for the "(.*?)" world location mailing list$/) do |world_location_name|
  world_location_slug = WorldLocation.find_by!(name: world_location_name).slug
  assert_signed_up_to_mailing_list("/government/world/#{world_location_slug}.atom", world_location_name)
end
Then(/^a govuk_delivery notification should have been sent to the mailing list I signed up for$/) do
  mock_govuk_delivery_client.assert_method_called(:notify, with: ->(feed_urls, _subject, _body, logging_params) {
    feed_urls.include?(@feed_signed_up_to)
  })
end
def mock_govuk_delivery_client
  @mock_client ||= RetrospectiveStub.new.tap { |mock_client|
    mock_client.stub :topic, returns: mock(parsed_content: { 'topic_id' => 'TOPIC_123', 'success' => true })
    mock_client.stub :signup_url, returns: 'http://govdelivery.url'
    mock_client.stub :notify
    Whitehall.stubs(govuk_delivery_client: mock_client)
  }
end
def mock_email_alert_api
  @email_mock_client ||= RetrospectiveStub.new.tap { |mock_client|
    mock_client.stub :find_or_create_subscriber_list, returns: { 'subscriber_list' => { 'topic_id' => 'TOPIC_123'} }
    EmailAlertApiSignupWorker.any_instance.stubs(email_alert_api: mock_client)
  }
end
def assert_signed_up_to_mailing_list(feed_path, description)
  @feed_signed_up_to = public_url(feed_path)
  mock_govuk_delivery_client.assert_method_called(:topic, with: [@feed_signed_up_to, description])
  mock_govuk_delivery_client.assert_method_called(:signup_url, with: [@feed_signed_up_to])
end
  def assert_method_called(method, opts = {})
    raise UnsatisfiedAssertion.new("Expected :#{method} to have been called, but wasn't\n\nCalls: \n#{inspect_calls}") unless @calls.any? { | call |
      call[:method] == method
    }

    if opts[:with].present?
      raise UnsatisfiedAssertion.new("Expected :#{method} to have been called #{inspect_args opts[:with]}, but wasn't\n\nCalls: \n#{inspect_calls}") unless @calls.any? { | call |
        call[:method] == method && (
          opts[:with].is_a?(Proc) ? opts[:with].call(*call[:args]) : opts[:with] == call[:args]
        )
      }
    end
  end
  def stub(method, opts = {})
    stubs << {
      method: method,
      with: opts[:with],
      returns: opts[:returns]
    }
  end
  def inspect_calls
    calls.map { |call|
      ":#{call[:method]}, Arguments: #{call[:args]}"
    }.join "\n"
  end
  def inspect_args(args)
    if args.is_a? Proc
      return "matching block: #{args.source}"
    else
      "with: #{args.inspect}"
    end
  end
  def public_url(path)
    (Plek.new.website_uri + path).to_s
  end
When(/^I draft a French\-only "World news story" news article associated with "([^"]*)"$/) do |location_name|
  create(:worldwide_organisation, name: "French embassy")

  begin_drafting_news_article title: "French-only news article", body: 'test-body', summary: 'test-summary', announcement_type: "World news story"
  select "Français", from: "Document language"
  select location_name, from: "Select the world locations this news article is about"
  select "French embassy", from: "Select the worldwide organisations associated with this news article"
  select "", from: "edition_lead_organisation_ids_1"

  click_button "Save"
  @news_article = find_news_article_in_locale!(:fr, 'French-only news article')
end
Then(/^I should only see the news article on the French version of the public "([^"]*)" location page$/) do |world_location_name|
  world_location = WorldLocation.find_by!(name: world_location_name)
  visit world_location_path(world_location, locale: :fr)
  within record_css_selector(@news_article) do
    assert page.has_content?(@news_article.title)
  end
  visit world_location_path(world_location)
  assert page.has_no_css?(record_css_selector(@news_article))
end
When(/^I draft a valid news article of type "([^"]*)" with title "([^"]*)"$/) do |news_type, title|
  if news_type == "World news story"
    create(:worldwide_organisation, name: "Afghanistan embassy")
    create(:world_location, name: "Afghanistan")
    begin_drafting_news_article(title: title, first_published: Date.today.to_s, announcement_type: news_type)
    select "Afghanistan embassy", from: "Select the worldwide organisations associated with this news article"
    select "Afghanistan", from: "Select the world locations this news article is about"
    select "", from: "edition_lead_organisation_ids_1"
  else
    begin_drafting_news_article(title: title, first_published: Date.today.to_s, announcement_type: news_type)
  end

  click_button "Save"
end
Then(/^the news article "([^"]*)" should have been created$/) do |title|
  refute NewsArticle.find_by(title: title).nil?
end
  def select(value, options = {})
    if options.has_key?(:from)
      element = find(:select, options[:from], visible: :all).find(:option, value, visible: :all)
      if element.visible?
        from = options.delete(:from)
        find(:select, from, options).find(:option, value, options).select_option
      else
        select_from_chosen(value, options)
      end
    else
      find(:option, value, options).select_option
    end
  end
  def find_news_article_in_locale!(locale, title)
    I18n.with_locale locale do
      NewsArticle.find_by!(title: title)
    end
  end
  def select_from_chosen(value, options = {})
    field = find_field(options[:from], visible: false, match: :first)
    option_value = page.evaluate_script("$(\"##{field[:id]} option:contains('#{value}')\").val()")

    if field[:multiple]
      page.execute_script("value = ['#{option_value}']\; if ($('##{field[:id]}').val()) {$.merge(value, $('##{field[:id]}').val())}")
      option_value = page.evaluate_script("value")
    end

    page.execute_script("$('##{field[:id]}').val(#{option_value.to_json})")
    page.execute_script("$('##{field[:id]}').trigger('liszt:updated').trigger('change')")
  end
Given /^a published speech "([^"]*)" by "([^"]*)" on "([^"]*)" at "([^"]*)"$/ do |title, ministerial_role, delivered_on, location|
  role_appointment = MinisterialRole.all.detect { |mr| mr.name == ministerial_role }.current_role_appointment
  create(:published_speech, title: title, role_appointment: role_appointment, delivered_on: Date.parse(delivered_on), location: location)
end
When /^I draft a new speech "([^"]*)" relating it to the policies "([^"]*)" and "([^"]*)"$/ do |title, first_policy, second_policy|
  begin_drafting_speech title: title
  # @policies is populated by PolicyTaggingHelpers#stub_publishing_api_policies
  select first_policy, from: "Policies"
  select second_policy, from: "Policies"
  click_button "Save"
end
Then(/^"(.*?)" should be related to "([^"]*)" and "([^"]*)" policies$/) do |title, policy_title_1, policy_title_2|
  speech = Speech.find_by(title: title).latest_edition

  # @policies is populated by PolicyTaggingHelpers#stub_publishing_api_policies
  expected_policies = @policies.select do |p|
    [policy_title_1, policy_title_2].include?(p["title"])
  end
  expected_policy_content_ids = expected_policies.map { |p| p["content_id"] }
  matching_policy_content_ids = (speech.policy_content_ids & expected_policy_content_ids)

  assert_equal(expected_policy_content_ids, matching_policy_content_ids)
end
  def begin_drafting_speech(options)
    organisation = create(:ministerial_department)
    person = create_person("Colonel Mustard")
    role = create(:ministerial_role, name: "Attorney General", organisations: [organisation])
    role_appointment = create(:role_appointment, person: person, role: role, started_at: Date.parse('2010-01-01'))
    speech_type = SpeechType::Transcript
    begin_drafting_document options.merge(type: 'speech', summary: "Some summary of the content", previously_published: false)
    select speech_type.singular_name, from: "Speech type"
    select "Colonel Mustard, Attorney General", from: "Speaker"
    select_date 1.day.ago.to_s, from: "Delivered on"
    fill_in "Location", with: "The Drawing Room"
  end
  def create_person(name, attributes = {})
    create(:person, split_person_name(name).merge(attributes))
  end
  def begin_drafting_document(options)
    if Organisation.count == 0
      create(:organisation)
    end
    if Topic.count == 0
      create(:topic)
    end
    visit admin_root_path
    # Make sure the dropdown is visible first, otherwise Capybara won't see the links
    find('li.create-new a', text: 'New document').click
    within 'li.create-new' do
      click_link options[:type].humanize
    end

    within 'form' do
      fill_in "edition_title", with: options[:title]
      fill_in "edition_body", with: options.fetch(:body, "Any old iron")
      fill_in "edition_summary", with: options.fetch(:summary, 'one plus one euals two!')
      fill_in_change_note_if_required
      select_topic_if_required unless options[:skip_topic_selection]

      unless options[:type] == 'world_location_news_article'
        set_lead_organisation_on_document(Organisation.first)
      end

      if options[:alternative_format_provider]
        select options[:alternative_format_provider].name, from: "edition_alternative_format_provider_id"
      end

      case options[:previously_published]
      when false
        choose 'has never been published before. It is new.'
      when true
        choose 'has previously been published on another website.'
      end

    end
  end
  def split_person_name(name)
    if match = /^(\w+)\s*(.*?)$/.match(name)
      forename, surname = match.captures
      { title: nil, forename: forename, surname: surname, letters: nil }
    else
      raise "couldn't split \"#{name}\""
    end
  end
  def set_lead_organisation_on_document(organisation, order = 1)
    select organisation.name, from: "edition_lead_organisation_ids_#{order}"
  end
  def fill_in_change_note_if_required
    if has_css?("textarea[name='edition[change_note]']", wait: false)
      fill_in "edition_change_note", with: "changes"
    end
  end
  def select_topic_if_required
    if has_css?(".edition-topic-fields", wait: false)
      within(".edition-topic-fields") do
        select Topic.first.name, from: "Policy Areas"
      end
    end
  end
Given /^"([^"]*)" is the "([^"]*)" for the "([^"]*)"$/ do |person_name, ministerial_role, organisation_name|
  create_role_appointment(person_name, ministerial_role, organisation_name, 2.years.ago)
end
When /^I visit the minister page for "([^"]*)"$/ do |name|
  visit ministers_page
  click_link name
end
  def create_role_appointment(person_name, role_name, organisation_name, timespan, options = {})
    person = find_or_create_person(person_name)
    organisation = Organisation.find_by(name: organisation_name) || create(:ministerial_department, name: organisation_name)
    role = MinisterialRole.create!({name: role_name}.merge(options[:role_options] || {}))
    organisation.ministerial_roles << role

    if timespan.is_a?(Hash)
      started_at = timespan.keys.first
      ended_at = timespan.values.first
    else
      started_at = timespan
      ended_at = nil
    end

    create(:role_appointment, role: role, person: person, started_at: started_at, ended_at: ended_at)
  end
  def ministers_page
    ministerial_roles_path
  end
  def find_or_create_person(name)
    find_person(name) || create_person(name)
  end
  def create_person(name, attributes = {})
    create(:person, split_person_name(name).merge(attributes))
  end
  def find_person(name)
    Person.where(split_person_name(name)).first
  end
Given(/^a topical event called "(.*?)" with description "(.*?)"$/) do |name, description|
  @topical_event = create(:topical_event, name: name, description: description)
  stub_topical_event_in_content_store(name)
end
When /^I draft a new speech "([^"]*)" relating it to topical event "([^"]*)"$/ do |speech_name, topical_event_name|
  begin_drafting_speech title: speech_name
  select topical_event_name, from: "Topical events"
  click_button "Save"
end
  def stub_topical_event_in_content_store(name)
    content_item = {
      format: "topical_event",
      title: name,
    }

    base_path = topical_event_path(TopicalEvent.find_by!(name: name))

    content_store_has_item(base_path, content_item)
  end
