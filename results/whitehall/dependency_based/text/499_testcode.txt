Given /^a submitted publication "([^"]*)" with a PDF attachment$/ do |title|
  publication = create(:submitted_publication, :with_file_attachment, title: title, body: "!@1")
  @attachment = publication.attachments.first
end
When /^I view the (publication|news article|consultation|speech|document) "([^"]*)"$/ do |document_type, title|
  click_link title
end
When /^I visit the list of documents awaiting review$/ do
  visit admin_editions_path(state: :submitted)
end
Then /^I should see (#{THE_DOCUMENT})$/ do |edition|
  assert has_css?(record_css_selector(edition))
end
When(/^I start editing the needs from the .*? page$/) do
  click_on 'Add/remove needs'
end
When(/^I choose the first need in the dropdown$/) do
  option = first('#need_ids option').text
  select option, from: 'need_ids'
  click_button 'Save needs'
end
  def select(value, options = {})
    if options.has_key?(:from)
      element = find(:select, options[:from], visible: :all).find(:option, value, visible: :all)
      if element.visible?
        from = options.delete(:from)
        find(:select, from, options).find(:option, value, options).select_option
      else
        select_from_chosen(value, options)
      end
    else
      find(:option, value, options).select_option
    end
  end
  def select_from_chosen(value, options = {})
    field = find_field(options[:from], visible: false, match: :first)
    option_value = page.evaluate_script("$(\"##{field[:id]} option:contains('#{value}')\").val()")

    if field[:multiple]
      page.execute_script("value = ['#{option_value}']\; if ($('##{field[:id]}').val()) {$.merge(value, $('##{field[:id]}').val())}")
      option_value = page.evaluate_script("value")
    end

    page.execute_script("$('##{field[:id]}').val(#{option_value.to_json})")
    page.execute_script("$('##{field[:id]}').trigger('liszt:updated').trigger('change')")
  end
