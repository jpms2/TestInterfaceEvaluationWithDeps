Given /^an? (world location|international delegation) "([^"]*)" exists with a translation for the locale "([^"]*)"$/ do |world_location_type, name, locale|
  location = create(world_location_type.gsub(' ', '_').to_sym, name: name)
  locale = Locale.find_by_language_name(locale)

  translation = LocalisedModel.new(location, locale.code)
  translation.name = 'Unimportant'
  translation.title = 'Unimportant'
  translation.save!
end
When /^I draft a French\-only news article associated with "([^"]*)"$/ do |location_name|
  begin_drafting_news_article title: "French-only news article", body: 'test-body', summary: 'test-summary'

  select "Fran√ßais", from: "Document language"
  select location_name, from: "Select the world locations this news article is about"
  click_button "Save"

  @news_article = find_news_article_in_locale!(:fr, 'French-only news article')
end
Then /^I should only see the news article on the French version of the public "([^"]*)" location page$/ do |world_location_name|
  world_location = WorldLocation.find_by!(name: world_location_name)
  visit world_location_path(world_location, locale: :fr)
  within record_css_selector(@news_article) do
    assert page.has_content?(@news_article.title)
  end

  visit world_location_path(world_location)
  assert page.has_no_css?(record_css_selector(@news_article))
end
  def select(value, options = {})
    if options.has_key?(:from)
      element = find(:select, options[:from], visible: :all).find(:option, value, visible: :all)
      if element.visible?
        from = options.delete(:from)
        find(:select, from, options).find(:option, value, options).select_option
      else
        select_from_chosen(value, options)
      end
    else
      find(:option, value, options).select_option
    end
  end
  def find_news_article_in_locale!(locale, title)
    I18n.with_locale locale do
      NewsArticle.find_by!(title: title)
    end
  end
  def select_from_chosen(value, options = {})
    field = find_field(options[:from], visible: false, match: :first)
    option_value = page.evaluate_script("$(\"##{field[:id]} option:contains('#{value}')\").val()")

    if field[:multiple]
      page.execute_script("value = ['#{option_value}']\; if ($('##{field[:id]}').val()) {$.merge(value, $('##{field[:id]}').val())}")
      option_value = page.evaluate_script("value")
    end

    page.execute_script("$('##{field[:id]}').val(#{option_value.to_json})")
    page.execute_script("$('##{field[:id]}').trigger('liszt:updated').trigger('change')")
  end
When /^I publish (#{THE_DOCUMENT})$/ do |edition|
  visit_edition_admin edition.title
  publish
end
Then /^I should see (#{THE_DOCUMENT})$/ do |edition|
  assert has_css?(record_css_selector(edition))
end
  def visit_edition_admin(title, scope = :all)
    document = Edition.send(scope).find_by(title: title)
    visit admin_edition_path(document)
  end
  def publish(options = {})
    if options[:force]
      click_link "Force publish"
      page.has_css?(".force-publish-form", visible: true)
      within '.force-publish-form' do
        fill_in 'reason', with: "because"
        click_button 'Force publish'
      end
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    else
      click_button "Publish"
      unless options[:ignore_errors]
        refute_flash_alerts_exist
      end
    end
  end
  def refute_flash_alerts_exist
    assert has_no_css?(".flash.alert")
  end
  def admin_edition_path(edition, *args)
    polymorphic_path([:admin, edition], *args)
  end
Given /^I am (?:a|an) (writer|editor|admin|GDS editor|GDS admin|importer|managing editor)(?: called "([^"]*)")?$/ do |role, name|
  @user = case role
  when "writer"
    create(:writer, name: (name || "Wally Writer"))
  when "editor"
    create(:departmental_editor, name: (name || "Eddie Depteditor"))
  when "admin"
    create(:user)
  when "GDS editor"
    create(:gds_editor)
  when "GDS admin"
    create(:gds_admin)
  when 'importer'
    create(:importer)
  when 'managing editor'
    create(:managing_editor)
  end
  login_as @user
end
  def login_as(user)
    GDS::SSO.test_user = user
    Edition::AuditTrail.whodunnit = user
    super(user) # warden
  end
