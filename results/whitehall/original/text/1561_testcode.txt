Given /^a published publication "([^"]*)" with type "([^"]*)"$/ do |publication_title, publication_type|
  type_id = PublicationType.all.select {|pt| pt.singular_name == publication_type }.first.id
  create(:published_publication, title: publication_title, publication_type_id: type_id)
end
When /^I filter the publications list by "([^"]*)"$/ do |publication_filter|
  visit publications_path
  select publication_filter, from: "Publication type"
  click_on "Refresh results"
end
  def select(value, options = {})
    if options.has_key?(:from)
      element = find(:select, options[:from], visible: :all).find(:option, value, visible: :all)
      if element.visible?
        from = options.delete(:from)
        find(:select, from, options).find(:option, value, options).select_option
      else
        select_from_chosen(value, options)
      end
    else
      find(:option, value, options).select_option
    end
  end
  def select_from_chosen(value, options = {})
    field = find_field(options[:from], visible: false, match: :first)
    option_value = page.evaluate_script("$(\"##{field[:id]} option:contains('#{value}')\").val()")

    if field[:multiple]
      page.execute_script("value = ['#{option_value}']\; if ($('##{field[:id]}').val()) {$.merge(value, $('##{field[:id]}').val())}")
      option_value = page.evaluate_script("value")
    end

    page.execute_script("$('##{field[:id]}').val(#{option_value.to_json})")
    page.execute_script("$('##{field[:id]}').trigger('liszt:updated').trigger('change')")
  end
Then /^I should see (#{THE_DOCUMENT})$/ do |edition|
  assert has_css?(record_css_selector(edition))
end
When(/^I visit the publications index page$/) do
  visit publications_path
end
When(/^I select the (.*) publication type option without clicking any button$/) do |publication_type|
  page.select publication_type, from: "Publication type"
end
Then /^I should be notified that statistics have moved$/ do
  assert page.has_content?("Statistics publications have moved")
end
