Given /^a user with email "([^\"]*)"$/ do |email|
  create_user(:email => email)
end
Given /^a user with username "([^\"]*)"$/ do |username|
  create_user(:email => username + "@" + username + '.' + username, :username => username)
end
Given /^a user named "([^\"]*)" with email "([^\"]*)"$/ do |name, email|
  first, last = name.split
  user = create_user(:email => email, :username => "#{first}_#{last}")
  user.profile.update_attributes!(:first_name => first, :last_name => last) if first
end
Given /^(?:|[tT]hat )?following user[s]?(?: exist[s]?)?:$/ do |table|
  table.hashes.each do |hash|
    if hash.has_key? "username" and hash.has_key? "email"
      step %{a user named "#{hash['username']}" with email "#{hash['email']}"}
    elsif hash.has_key? "username"
      step %{a user with username "#{hash['username']}"}
    elsif hash.has_key? "email"
      step %{a user with email "#{hash['email']}"}
    end
  end
end
Given /^I have an aspect called "([^\"]*)"$/ do |aspect_name|
  @me.aspects.create!(:name => aspect_name)
  @me.reload
end
Given /^I have following aspect[s]?:$/ do |fields|
  fields.raw.each do |field|
    step %{I have an aspect called "#{field[0]}"}
  end
end
When /^I have user with username "([^"]*)" in an aspect called "([^"]*)"$/ do |username, aspect|
  user = User.find_by_username(username)
  contact = @me.reload.contact_for(user.person)
  contact.aspects << @me.aspects.find_by_name(aspect)
end
Given /^a user with username "([^"]*)" is connected with "([^"]*)"$/ do |arg1, arg2|
  user1 = User.where(:username => arg1).first
  user2 = User.where(:username => arg2).first
  connect_users(user1, user1.aspects.where(:name => "Besties").first, user2, user2.aspects.where(:name => "Besties").first)
end
Then /^I should have (\d+) email delivery$/ do |n|
  ActionMailer::Base.deliveries.length.should == n.to_i
end
  def create_user(overrides={})
    default_attrs = {
        :password => 'password',
        :password_confirmation => 'password',
        :getting_started => false
    }

    user = FactoryGirl.create(:user, default_attrs.merge(overrides))
    add_standard_aspects(user)
    user
  end
  def add_standard_aspects(user)
    user.aspects.create(:name => "Besties")
    user.aspects.create(:name => "Unicorns")
  end
Given /^(?:I am signed in)$/ do
  automatic_login
  confirm_login
end
When /^I (?:sign|log) in as "([^"]*)"$/ do |email|
  @me = User.find_by_email(email)
  @me.password ||= 'password'
  automatic_login
  confirm_login
end
When /^I (?:log|sign) out$/ do
  logout
end
  def automatic_login
    @me ||= FactoryGirl.create(:user_with_aspect, :getting_started => false)
    visit(new_integration_sessions_path(:user_id => @me.id))
    click_button "Login"
  end
  def confirm_login
    page.has_content?("#{@me.first_name} #{@me.last_name}")
  end
  def logout
    $browser.delete_cookie('_session', 'path=/') if $browser
    $browser.delete_all_visible_cookies if $browser
  end
Given /^(?:|I )am on (.+)$/ do |page_name|
  navigate_to(page_name)
end
When /^(?:|I )go to (.+)$/ do |page_name|
  navigate_to(page_name)
end
When /^(?:|I )press "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|
  with_scope(selector) do
    click_button(button)
  end
end
Then /^(?:|I )should see (\".+?\"[\s]*)(?:[\s]+within[\s]* "([^"]*)")?$/ do |vars, selector|
  vars.scan(/"([^"]+?)"/).flatten.each do |text|
    with_scope(selector) do
      current_scope.should have_content(text)
    end
  end
end
Then /^(?:|I )should not see (\".+?\"[\s]*)(?:[\s]+within[\s]* "([^"]*)")?$/ do |vars,selector|
  vars.scan(/"([^"]+?)"/).flatten.each do |text|
    with_scope(selector) do
      page.should have_no_content(text)
    end
  end
end
  def navigate_to(page_name)
    path = path_to(page_name)
    unless path.is_a?(Hash)
      visit(path)
    else
      visit(path[:path])
      await_elem = path[:special_elem]
      find(await_elem.delete(:selector), await_elem)
    end
  end
  def with_scope(locator)
    if locator
      within(locator, match: :first) do
        yield
      end
    else
      yield
    end
  end
  def path_to(page_name)
    case page_name
      when /^person_photos page$/
         person_photos_path(@me.person)
      when /^the home(?: )?page$/
        stream_path
      when /^the mobile path$/
        force_mobile_path
      when /^step (\d)$/
        if $1.to_i == 1
          getting_started_path
        else
          getting_started_path(:step => $1)
        end
      when /^the tag page for "([^\"]*)"$/
        tag_path($1)
      when /^its ([\w ]+) page$/
        send("#{$1.gsub(/\W+/, '_')}_path", @it)
      when /^the ([\w ]+) page$/
        send("#{$1.gsub(/\W+/, '_')}_path")
      when /^my edit profile page$/
        edit_profile_path
      when /^my profile page$/
        person_path(@me.person)
      when /^my acceptance form page$/
        invite_code_path(InvitationCode.first)
      when /^the requestors profile$/
        person_path(Request.where(:recipient_id => @me.person.id).first.sender)
      when /^"([^\"]*)"'s page$/
        p = User.find_by_email($1).person
        { path: person_path(p),
          # '#diaspora_handle' on desktop, '.description' on mobile
          special_elem: { selector: '#diaspora_handle, .description', text: p.diaspora_handle }
        }
      when /^"([^\"]*)"'s photos page$/
        p = User.find_by_email($1).person
        person_photos_path p
      when /^my account settings page$/
        edit_user_path
      when /^forgot password page$/
          new_user_password_path
      when /^"(\/.*)"/
        $1
      else
        raise "Can't find mapping from \"#{page_name}\" to a path."
    end
  end
Then /^"([^"]*)" should be part of active conversation$/ do |name|
  within(".conversation_participants") do
    find("img.avatar[title^='#{name}']").should_not be_nil
  end
end
Then /^I should have (\d+) unread private messages?$/ do |n_unread|
  find("header #conversations_badge .badge_count").should have_content(n_unread)
end
Then /^I send a message with subject "([^"]*)" and text "([^"]*)" to "([^"]*)"$/ do |subject, text, person|
  step %(I am on the conversations page)
  within("#conversation_new", match: :first) do
    step %(I fill in "contact_autocomplete" with "#{person}")
    step %(I press the first ".as-result-item" within ".as-results")
    step %(I fill in "conversation_subject" with "#{subject}")
    step %(I fill in "conversation_text" with "#{text}")
    step %(I press "Send")
  end
end
Then /^I send a message with subject "([^"]*)" and text "([^"]*)" to "([^"]*)" using keyboard shortcuts$/ do |subject, text, person|
  step %(I am on the conversations page)
  within("#conversation_new", match: :first) do
    step %(I fill in "contact_autocomplete" with "#{person}")
    step %(I press the first ".as-result-item" within ".as-results")
    step %(I fill in "conversation_subject" with "#{subject}")
    step %(I fill in "conversation_text" with "#{text}")
    find("#conversation_text").native.send_keys :control, :return
  end
end
When /^I reply with "([^"]*)"$/ do |text|
  step %(I am on the conversations page)
  step %(I press the first ".conversation" within ".conversations")
  step %(I fill in "message_text" with "#{text}")
  step %(I press "Reply")
end
When /^I reply with "([^"]*)" using keyboard shortcuts$/ do |text|
  step %(I am on the conversations page)
  step %(I press the first ".conversation" within ".conversations")
  step %(I fill in "message_text" with "#{text}")
  find("#message_text").native.send_keys :control, :return
end
Then /^I should see "([^"]*)" as a participant$/ do |name|
  find(".conversation.stream_element img.avatar[title^='#{name}']").should_not be_nil
end
When /^I select only "([^"]*)" aspect$/ do |aspect_name|
  click_link 'My aspects'
  within('#aspects_list') do
    click_link 'Deselect all'
    current_scope.should have_no_css '.selected'
  end
  step %Q(I select "#{aspect_name}" aspect as well)
end
When /^I select all aspects$/ do
  within('#aspects_list') do
    click_link "Select all"
  end
end
When /^I press the aspect dropdown$/ do
  click_aspect_dropdown
end
When /^I drag "([^"]*)" (up|down)$/ do |aspect_name, direction|
  aspect_id = @me.aspects.where(name: aspect_name).first.id
  aspect = find(:xpath, "//div[@id='aspect_nav']/ul/li[@data-aspect-id='#{aspect_id}']")
  target = direction == "up" ? aspect.all(:xpath, "./preceding-sibling::li").last :
                               aspect.all(:xpath, "./following-sibling::li").first
  browser = aspect.base.driver.browser
  mouse = browser.mouse
  native_aspect = aspect.base.native
  native_target = target.base.native
  mouse.down native_aspect
  mouse.move_to native_target, native_target.size.width / 2, 0
  sleep 1
  mouse.up
  expect(page).to have_no_css "#aspect_nav .ui-sortable.syncing"
 end
And /^I toggle the aspect "([^"]*)"$/ do |name|
  toggle_aspect(name)
end
Then /^I should see "([^"]*)" as (\d+). aspect$/ do |aspect_name, position|
  expect(find("#aspect_nav li:nth-child(#{position.to_i + 2})")).to have_text aspect_name
end
  def click_aspect_dropdown
    find('.aspect_dropdown .dropdown-toggle').click
  end
  def toggle_aspect(a_name)
    a_id = @me.aspects.where(name: a_name).pluck(:id).first
    aspect_css = ".aspect_dropdown li[data-aspect_id='#{a_id}']"
    expect(page).to have_selector(aspect_css)
    find(aspect_css).click
  end
And /^I submit the publisher$/ do
  submit_publisher
end
When /^I click the publisher and post "([^"]*)"$/ do |text|
  click_and_post(text)
end
When /^I write the status message "([^"]*)"$/ do |text|
  write_in_publisher(text)
end
When /^I append "([^"]*)" to the publisher$/ do |text|
  append_to_publisher(text)
end
When /^I select "([^"]*)" on the aspect dropdown$/ do |text|
  page.execute_script(
    "$('#publisher .dropdown .dropdown_list, #publisher .aspect_dropdown .dropdown-menu')
      .find('li').each(function(i,el){
      var elem = $(el);
      if ('" + text + "' == $.trim(elem.text()) ) {
        elem.click();
      }});")
end
  def write_in_publisher(txt)
    fill_in 'status_message_fake_text', with: txt
  end
  def append_to_publisher(txt, input_selector='#status_message_fake_text')
    elem = find(input_selector)
    elem.native.send_keys(' ' + txt)

    # make sure the other text field got the new contents
    expect(find("#status_message_text", visible: false)).to have_value txt
  end
  def submit_publisher
    txt = find('#publisher #status_message_fake_text').value
    find('#publisher .creation').click
    # wait for the content to appear
    expect(find('#main_stream')).to have_content(txt)
  end
  def click_and_post(text)
    click_publisher
    make_post(text)
  end
  def make_post(text)
    write_in_publisher(text)
    submit_publisher
  end
  def click_publisher
    page.execute_script('
     $("#publisher").removeClass("closed");
     $("#publisher").find("#status_message_fake_text").focus();
    ')
  end
Then /^"([^"]*)" should be post (\d+)$/ do |post_text, position|
  stream_element_numbers_content(position).should have_content(post_text)
end
  def stream_element_numbers_content(position)
    find(".stream_element:nth-child(#{position}) .post-content")
  end
And /^I expand the publisher$/ do
 click_publisher
end
And /^I hover over the "([^"]+)"$/ do |element|
  find("#{element}", match: :first).hover
end
When /^I click to hide the first post$/ do
  step "I prepare hiding the first post"
  step "I confirm the alert"
end
When /^I have turned off jQuery effects$/ do
  page.execute_script("$.fx.off = true")
end
  def click_publisher
    page.execute_script('
     $("#publisher").removeClass("closed");
     $("#publisher").find("#status_message_fake_text").focus();
    ')
  end
When /^I toggle the mobile view$/ do
  visit('/mobile/toggle')
end
Given /^a user with email "([^\"]*)"$/ do |email|
  create_user(:email => email)
end
Given /^a user with username "([^\"]*)"$/ do |username|
  create_user(:email => username + "@" + username + '.' + username, :username => username)
end
Given /^a user named "([^\"]*)" with email "([^\"]*)"$/ do |name, email|
  first, last = name.split
  user = create_user(:email => email, :username => "#{first}_#{last}")
  user.profile.update_attributes!(:first_name => first, :last_name => last) if first
end
Given /^I have an aspect called "([^\"]*)"$/ do |aspect_name|
  @me.aspects.create!(:name => aspect_name)
  @me.reload
end
When /^(?:|I )press "([^"]*)"(?: within "([^"]*)")?$/ do |button, selector|
  with_scope(selector) do
    click_button(button)
  end
end
When /^(?:|I )fill in "([^"]*)" with "([^"]*)"(?: within "([^"]*)")?$/ do |field, value, selector|
  with_scope(selector) do
    fill_in(field, :with => value)
  end
end
When /^I prepare hiding the first post$/ do
  within(find(".stream .stream_element", match: :first)) do
    ctrl = find(".control-icons")
    ctrl.hover
    ctrl.find(".hide_post").click
  end
end
And /^I confirm the alert$/ do
  page.driver.browser.switch_to.alert.accept
end
When /^I press the first "([^"]*)"(?: within "([^"]*)")?$/ do |link_selector, within_selector|
  with_scope(within_selector) do
    current_scope.find(link_selector, match: :first).click
  end
end
When /^I select "([^"]*)" aspect as well$/ do |aspect_name|
  within('#aspects_list') do
    click_link aspect_name
  end
  step %Q(I should see "#{aspect_name}" aspect selected)
end
Then /^I should see "([^"]*)" aspect selected$/ do |aspect_name|
  aspect = @me.aspects.where(:name => aspect_name).first
  within("#aspects_list") do
    current_scope.should have_css "li[data-aspect_id='#{aspect.id}'] .selected"
  end
end
